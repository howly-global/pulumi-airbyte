// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Outputs
{

    [OutputType]
    public sealed class SourceFakerConfiguration
    {
        /// <summary>
        /// Should the updated_at values for every record be new each sync?  Setting this to false will case the source to stop emitting records after COUNT records have been emitted. Default: true
        /// </summary>
        public readonly bool? AlwaysUpdated;
        /// <summary>
        /// How many users should be generated in total. The purchases table will be scaled to match, with 10 purchases created per 10 users. This setting does not apply to the products stream. Default: 1000
        /// </summary>
        public readonly int? Count;
        /// <summary>
        /// How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will allocate to this source. Default: 4
        /// </summary>
        public readonly int? Parallelism;
        /// <summary>
        /// How many fake records will be in each page (stream slice), before a state message is emitted?. Default: 1000
        /// </summary>
        public readonly int? RecordsPerSlice;
        /// <summary>
        /// Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random). Default: -1
        /// </summary>
        public readonly int? Seed;

        [OutputConstructor]
        private SourceFakerConfiguration(
            bool? alwaysUpdated,

            int? count,

            int? parallelism,

            int? recordsPerSlice,

            int? seed)
        {
            AlwaysUpdated = alwaysUpdated;
            Count = count;
            Parallelism = parallelism;
            RecordsPerSlice = recordsPerSlice;
            Seed = seed;
        }
    }
}
