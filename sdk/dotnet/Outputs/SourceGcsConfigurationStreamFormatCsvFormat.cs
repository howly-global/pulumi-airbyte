// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Outputs
{

    [OutputType]
    public sealed class SourceGcsConfigurationStreamFormatCsvFormat
    {
        /// <summary>
        /// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
        /// </summary>
        public readonly string? Delimiter;
        /// <summary>
        /// Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
        /// </summary>
        public readonly bool? DoubleQuote;
        /// <summary>
        /// The character encoding of the CSV data. Leave blank to default to &lt;strong&gt;UTF8&lt;/strong&gt;. See &lt;a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank"&gt;list of python encodings&lt;/a&gt; for allowable options. Default: "utf8"
        /// </summary>
        public readonly string? Encoding;
        /// <summary>
        /// The character used for escaping special characters. To disallow escaping, leave this field blank.
        /// </summary>
        public readonly string? EscapeChar;
        /// <summary>
        /// A set of case-sensitive strings that should be interpreted as false values.
        /// </summary>
        public readonly ImmutableArray<string> FalseValues;
        /// <summary>
        /// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
        /// </summary>
        public readonly Outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinition? HeaderDefinition;
        /// <summary>
        /// Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
        /// </summary>
        public readonly bool? IgnoreErrorsOnFieldsMismatch;
        /// <summary>
        /// How to infer the types of the columns. If none, inference default to strings. must be one of ["None", "Primitive Types Only"]; Default: "None"
        /// </summary>
        public readonly string? InferenceType;
        /// <summary>
        /// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
        /// </summary>
        public readonly ImmutableArray<string> NullValues;
        /// <summary>
        /// The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
        /// </summary>
        public readonly string? QuoteChar;
        /// <summary>
        /// The number of rows to skip after the header row. Default: 0
        /// </summary>
        public readonly int? SkipRowsAfterHeader;
        /// <summary>
        /// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
        /// </summary>
        public readonly int? SkipRowsBeforeHeader;
        /// <summary>
        /// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
        /// </summary>
        public readonly bool? StringsCanBeNull;
        /// <summary>
        /// A set of case-sensitive strings that should be interpreted as true values.
        /// </summary>
        public readonly ImmutableArray<string> TrueValues;

        [OutputConstructor]
        private SourceGcsConfigurationStreamFormatCsvFormat(
            string? delimiter,

            bool? doubleQuote,

            string? encoding,

            string? escapeChar,

            ImmutableArray<string> falseValues,

            Outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinition? headerDefinition,

            bool? ignoreErrorsOnFieldsMismatch,

            string? inferenceType,

            ImmutableArray<string> nullValues,

            string? quoteChar,

            int? skipRowsAfterHeader,

            int? skipRowsBeforeHeader,

            bool? stringsCanBeNull,

            ImmutableArray<string> trueValues)
        {
            Delimiter = delimiter;
            DoubleQuote = doubleQuote;
            Encoding = encoding;
            EscapeChar = escapeChar;
            FalseValues = falseValues;
            HeaderDefinition = headerDefinition;
            IgnoreErrorsOnFieldsMismatch = ignoreErrorsOnFieldsMismatch;
            InferenceType = inferenceType;
            NullValues = nullValues;
            QuoteChar = quoteChar;
            SkipRowsAfterHeader = skipRowsAfterHeader;
            SkipRowsBeforeHeader = skipRowsBeforeHeader;
            StringsCanBeNull = stringsCanBeNull;
            TrueValues = trueValues;
        }
    }
}
