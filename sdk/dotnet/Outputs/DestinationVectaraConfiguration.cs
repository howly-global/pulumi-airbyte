// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Outputs
{

    [OutputType]
    public sealed class DestinationVectaraConfiguration
    {
        /// <summary>
        /// The Name of Corpus to load data into
        /// </summary>
        public readonly string CorpusName;
        /// <summary>
        /// Your customer id as it is in the authenticaion url
        /// </summary>
        public readonly string CustomerId;
        /// <summary>
        /// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
        /// </summary>
        public readonly ImmutableArray<string> MetadataFields;
        /// <summary>
        /// OAuth2.0 credentials used to authenticate admin actions (creating/deleting corpora)
        /// </summary>
        public readonly Outputs.DestinationVectaraConfigurationOauth2 Oauth2;
        /// <summary>
        /// Parallelize indexing into Vectara with multiple threads. Default: false
        /// </summary>
        public readonly bool? Parallelize;
        /// <summary>
        /// List of fields in the record that should be in the section of the document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
        /// </summary>
        public readonly ImmutableArray<string> TextFields;
        /// <summary>
        /// A field that will be used to populate the `title` of each document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. Default: ""
        /// </summary>
        public readonly string? TitleField;

        [OutputConstructor]
        private DestinationVectaraConfiguration(
            string corpusName,

            string customerId,

            ImmutableArray<string> metadataFields,

            Outputs.DestinationVectaraConfigurationOauth2 oauth2,

            bool? parallelize,

            ImmutableArray<string> textFields,

            string? titleField)
        {
            CorpusName = corpusName;
            CustomerId = customerId;
            MetadataFields = metadataFields;
            Oauth2 = oauth2;
            Parallelize = parallelize;
            TextFields = textFields;
            TitleField = titleField;
        }
    }
}
