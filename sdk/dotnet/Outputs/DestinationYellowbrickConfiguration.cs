// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Outputs
{

    [OutputType]
    public sealed class DestinationYellowbrickConfiguration
    {
        /// <summary>
        /// Name of the database.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// Hostname of the database.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
        /// </summary>
        public readonly string? JdbcUrlParams;
        /// <summary>
        /// Password associated with the username.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Port of the database. Default: 5432
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "public"
        /// </summary>
        public readonly string? Schema;
        /// <summary>
        /// Encrypt data using SSL. When activating SSL, please select one of the connection modes. Default: false
        /// </summary>
        public readonly bool? Ssl;
        /// <summary>
        /// SSL connection modes. 
        ///  &lt;b&gt;disable&lt;/b&gt; - Chose this mode to disable encryption of communication between Airbyte and destination database
        ///  &lt;b&gt;allow&lt;/b&gt; - Chose this mode to enable encryption only when required by the source database
        ///  &lt;b&gt;prefer&lt;/b&gt; - Chose this mode to allow unencrypted connection only if the source database does not support encryption
        ///  &lt;b&gt;require&lt;/b&gt; - Chose this mode to always require encryption. If the source database server does not support encryption, connection will fail
        ///   &lt;b&gt;verify-ca&lt;/b&gt; - Chose this mode to always require encryption and to verify that the source database server has a valid SSL certificate
        ///   &lt;b&gt;verify-full&lt;/b&gt; - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the source database server
        ///  See more information - &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
        /// </summary>
        public readonly Outputs.DestinationYellowbrickConfigurationSslMode? SslMode;
        /// <summary>
        /// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
        /// </summary>
        public readonly Outputs.DestinationYellowbrickConfigurationTunnelMethod? TunnelMethod;
        /// <summary>
        /// Username to use to access the database.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private DestinationYellowbrickConfiguration(
            string database,

            string host,

            string? jdbcUrlParams,

            string? password,

            int? port,

            string? schema,

            bool? ssl,

            Outputs.DestinationYellowbrickConfigurationSslMode? sslMode,

            Outputs.DestinationYellowbrickConfigurationTunnelMethod? tunnelMethod,

            string username)
        {
            Database = database;
            Host = host;
            JdbcUrlParams = jdbcUrlParams;
            Password = password;
            Port = port;
            Schema = schema;
            Ssl = ssl;
            SslMode = sslMode;
            TunnelMethod = tunnelMethod;
            Username = username;
        }
    }
}
