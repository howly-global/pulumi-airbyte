// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Outputs
{

    [OutputType]
    public sealed class DestinationRedshiftConfigurationUploadingMethodAwss3Staging
    {
        /// <summary>
        /// This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
        /// </summary>
        public readonly string AccessKeyId;
        /// <summary>
        /// How to encrypt the staging data
        /// </summary>
        public readonly Outputs.DestinationRedshiftConfigurationUploadingMethodAwss3StagingEncryption? Encryption;
        /// <summary>
        /// The pattern allows you to set the file-name format for the S3 staging file(s)
        /// </summary>
        public readonly string? FileNamePattern;
        /// <summary>
        /// Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details. Default: true
        /// </summary>
        public readonly bool? PurgeStagingData;
        /// <summary>
        /// The name of the staging S3 bucket.
        /// </summary>
        public readonly string S3BucketName;
        /// <summary>
        /// The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
        /// </summary>
        public readonly string? S3BucketPath;
        /// <summary>
        /// The region of the S3 staging bucket. must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]; Default: ""
        /// </summary>
        public readonly string? S3BucketRegion;
        /// <summary>
        /// The corresponding secret to the above access key id. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
        /// </summary>
        public readonly string SecretAccessKey;

        [OutputConstructor]
        private DestinationRedshiftConfigurationUploadingMethodAwss3Staging(
            string accessKeyId,

            Outputs.DestinationRedshiftConfigurationUploadingMethodAwss3StagingEncryption? encryption,

            string? fileNamePattern,

            bool? purgeStagingData,

            string s3BucketName,

            string? s3BucketPath,

            string? s3BucketRegion,

            string secretAccessKey)
        {
            AccessKeyId = accessKeyId;
            Encryption = encryption;
            FileNamePattern = fileNamePattern;
            PurgeStagingData = purgeStagingData;
            S3BucketName = s3BucketName;
            S3BucketPath = s3BucketPath;
            S3BucketRegion = s3BucketRegion;
            SecretAccessKey = secretAccessKey;
        }
    }
}
