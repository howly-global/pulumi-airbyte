// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceGooglePagespeedInsightsConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("categories", required: true)]
        private InputList<string>? _categories;

        /// <summary>
        /// Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        [Input("strategies", required: true)]
        private InputList<string>? _strategies;

        /// <summary>
        /// The analyses strategy to use. Either "desktop" or "mobile".
        /// </summary>
        public InputList<string> Strategies
        {
            get => _strategies ?? (_strategies = new InputList<string>());
            set => _strategies = value;
        }

        [Input("urls", required: true)]
        private InputList<string>? _urls;

        /// <summary>
        /// The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        public SourceGooglePagespeedInsightsConfigurationArgs()
        {
        }
        public static new SourceGooglePagespeedInsightsConfigurationArgs Empty => new SourceGooglePagespeedInsightsConfigurationArgs();
    }
}
