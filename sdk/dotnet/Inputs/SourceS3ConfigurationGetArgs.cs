// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceS3ConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAccessKeyId")]
        private Input<string>? _awsAccessKeyId;

        /// <summary>
        /// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
        /// </summary>
        public Input<string>? AwsAccessKeyId
        {
            get => _awsAccessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _awsAccessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("awsSecretAccessKey")]
        private Input<string>? _awsSecretAccessKey;

        /// <summary>
        /// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
        /// </summary>
        public Input<string>? AwsSecretAccessKey
        {
            get => _awsSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _awsSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the S3 bucket where the file(s) exist.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Deprecated and will be removed soon. Please do not use this field anymore and use streams.name instead. The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// Endpoint to an S3 compatible service. Leave empty to use AWS. The custom endpoint must be secure, but the 'https' prefix is not required. Default: ""
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Deprecated and will be removed soon. Please do not use this field anymore and use streams.format instead. The format of the files you'd like to replicate
        /// </summary>
        [Input("format")]
        public Input<Inputs.SourceS3ConfigurationFormatGetArgs>? Format { get; set; }

        /// <summary>
        /// Deprecated and will be removed soon. Please do not use this field anymore and use streams.globs instead. A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See &lt;a href="https://facelessuser.github.io/wcmatch/glob/" target="_blank"&gt;this page&lt;/a&gt; to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern &lt;strong&gt;**&lt;/strong&gt; to pick up all files.
        /// </summary>
        [Input("pathPattern")]
        public Input<string>? PathPattern { get; set; }

        /// <summary>
        /// Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
        /// </summary>
        [Input("provider")]
        public Input<Inputs.SourceS3ConfigurationProviderGetArgs>? Provider { get; set; }

        /// <summary>
        /// AWS region where the S3 bucket is located. If not provided, the region will be determined automatically.
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        /// <summary>
        /// Specifies the Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations requested using this profile. Set the External ID to the Airbyte workspace ID, which can be found in the URL of this page.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// Deprecated and will be removed soon. Please do not use this field anymore and use streams.input_schema instead. Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of &lt;strong&gt;{ "column" : "type" }&lt;/strong&gt;, where types are valid &lt;a href="https://json-schema.org/understanding-json-schema/reference/type.html" target="_blank"&gt;JSON Schema datatypes&lt;/a&gt;. Leave as {} to auto-infer the schema. Default: "{}"
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        [Input("streams", required: true)]
        private InputList<Inputs.SourceS3ConfigurationStreamGetArgs>? _streams;

        /// <summary>
        /// Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
        /// </summary>
        public InputList<Inputs.SourceS3ConfigurationStreamGetArgs> Streams
        {
            get => _streams ?? (_streams = new InputList<Inputs.SourceS3ConfigurationStreamGetArgs>());
            set => _streams = value;
        }

        public SourceS3ConfigurationGetArgs()
        {
        }
        public static new SourceS3ConfigurationGetArgs Empty => new SourceS3ConfigurationGetArgs();
    }
}
