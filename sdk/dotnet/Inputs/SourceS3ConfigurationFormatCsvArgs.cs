// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceS3ConfigurationFormatCsvArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optionally add a valid JSON string here to provide additional options to the csv reader. Mappings must correspond to options &lt;a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ConvertOptions.html#pyarrow.csv.ConvertOptions" target="_blank"&gt;detailed here&lt;/a&gt;. 'column_types' is used internally to handle schema so overriding that would likely cause problems.
        /// </summary>
        [Input("additionalReaderOptions")]
        public Input<string>? AdditionalReaderOptions { get; set; }

        /// <summary>
        /// Optionally add a valid JSON string here to provide additional &lt;a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ReadOptions.html#pyarrow.csv.ReadOptions" target="_blank"&gt;Pyarrow ReadOptions&lt;/a&gt;. Specify 'column_names' here if your CSV doesn't have header, or if you want to use custom column names. 'block_size' and 'encoding' are already used above, specify them again here will override the values above.
        /// </summary>
        [Input("advancedOptions")]
        public Input<string>? AdvancedOptions { get; set; }

        /// <summary>
        /// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors. Default: 10000
        /// </summary>
        [Input("blockSize")]
        public Input<int>? BlockSize { get; set; }

        /// <summary>
        /// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
        /// </summary>
        [Input("doubleQuote")]
        public Input<bool>? DoubleQuote { get; set; }

        /// <summary>
        /// The character encoding of the CSV data. Leave blank to default to &lt;strong&gt;UTF8&lt;/strong&gt;. See &lt;a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank"&gt;list of python encodings&lt;/a&gt; for allowable options. Default: "utf8"
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// The character used for escaping special characters. To disallow escaping, leave this field blank.
        /// </summary>
        [Input("escapeChar")]
        public Input<string>? EscapeChar { get; set; }

        /// <summary>
        /// Configures whether a schema for the source should be inferred from the current data or not. If set to false and a custom schema is set, then the manually enforced schema is used. If a schema is not manually set, and this is set to false, then all fields will be read as strings. Default: true
        /// </summary>
        [Input("inferDatatypes")]
        public Input<bool>? InferDatatypes { get; set; }

        /// <summary>
        /// Whether newline characters are allowed in CSV values. Turning this on may affect performance. Leave blank to default to False. Default: false
        /// </summary>
        [Input("newlinesInValues")]
        public Input<bool>? NewlinesInValues { get; set; }

        /// <summary>
        /// The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
        /// </summary>
        [Input("quoteChar")]
        public Input<string>? QuoteChar { get; set; }

        public SourceS3ConfigurationFormatCsvArgs()
        {
        }
        public static new SourceS3ConfigurationFormatCsvArgs Empty => new SourceS3ConfigurationFormatCsvArgs();
    }
}
