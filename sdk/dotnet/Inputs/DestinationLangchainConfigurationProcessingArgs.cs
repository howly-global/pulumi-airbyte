// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationLangchainConfigurationProcessingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
        /// </summary>
        [Input("chunkOverlap")]
        public Input<int>? ChunkOverlap { get; set; }

        /// <summary>
        /// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
        /// </summary>
        [Input("chunkSize", required: true)]
        public Input<int> ChunkSize { get; set; } = null!;

        [Input("textFields", required: true)]
        private InputList<string>? _textFields;

        /// <summary>
        /// List of fields in the record that should be used to calculate the embedding. All other fields are passed along as meta fields. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
        /// </summary>
        public InputList<string> TextFields
        {
            get => _textFields ?? (_textFields = new InputList<string>());
            set => _textFields = value;
        }

        public DestinationLangchainConfigurationProcessingArgs()
        {
        }
        public static new DestinationLangchainConfigurationProcessingArgs Empty => new DestinationLangchainConfigurationProcessingArgs();
    }
}
