// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationVectaraConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Name of Corpus to load data into
        /// </summary>
        [Input("corpusName", required: true)]
        public Input<string> CorpusName { get; set; } = null!;

        /// <summary>
        /// Your customer id as it is in the authenticaion url
        /// </summary>
        [Input("customerId", required: true)]
        public Input<string> CustomerId { get; set; } = null!;

        [Input("metadataFields")]
        private InputList<string>? _metadataFields;

        /// <summary>
        /// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
        /// </summary>
        public InputList<string> MetadataFields
        {
            get => _metadataFields ?? (_metadataFields = new InputList<string>());
            set => _metadataFields = value;
        }

        /// <summary>
        /// OAuth2.0 credentials used to authenticate admin actions (creating/deleting corpora)
        /// </summary>
        [Input("oauth2", required: true)]
        public Input<Inputs.DestinationVectaraConfigurationOauth2Args> Oauth2 { get; set; } = null!;

        /// <summary>
        /// Parallelize indexing into Vectara with multiple threads. Default: false
        /// </summary>
        [Input("parallelize")]
        public Input<bool>? Parallelize { get; set; }

        [Input("textFields")]
        private InputList<string>? _textFields;

        /// <summary>
        /// List of fields in the record that should be in the section of the document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
        /// </summary>
        public InputList<string> TextFields
        {
            get => _textFields ?? (_textFields = new InputList<string>());
            set => _textFields = value;
        }

        /// <summary>
        /// A field that will be used to populate the `title` of each document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. Default: ""
        /// </summary>
        [Input("titleField")]
        public Input<string>? TitleField { get; set; }

        public DestinationVectaraConfigurationArgs()
        {
        }
        public static new DestinationVectaraConfigurationArgs Empty => new DestinationVectaraConfigurationArgs();
    }
}
