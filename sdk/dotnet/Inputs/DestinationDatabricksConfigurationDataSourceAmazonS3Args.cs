// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationDatabricksConfigurationDataSourceAmazonS3Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The pattern allows you to set the file-name format for the S3 staging file(s)
        /// </summary>
        [Input("fileNamePattern")]
        public Input<string>? FileNamePattern { get; set; }

        [Input("s3AccessKeyId", required: true)]
        private Input<string>? _s3AccessKeyId;

        /// <summary>
        /// The Access Key Id granting allow one to access the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket.
        /// </summary>
        public Input<string>? S3AccessKeyId
        {
            get => _s3AccessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3AccessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the S3 bucket to use for intermittent staging of the data.
        /// </summary>
        [Input("s3BucketName", required: true)]
        public Input<string> S3BucketName { get; set; } = null!;

        /// <summary>
        /// The directory under the S3 bucket where data will be written.
        /// </summary>
        [Input("s3BucketPath", required: true)]
        public Input<string> S3BucketPath { get; set; } = null!;

        /// <summary>
        /// The region of the S3 staging bucket to use if utilising a copy strategy. must be one of ["", "us-east-1", "us-east-2", "us-west-1", "us-west-2", "af-south-1", "ap-east-1", "ap-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ca-central-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-north-1", "eu-south-1", "eu-west-1", "eu-west-2", "eu-west-3", "sa-east-1", "me-south-1", "us-gov-east-1", "us-gov-west-1"]; Default: ""
        /// </summary>
        [Input("s3BucketRegion")]
        public Input<string>? S3BucketRegion { get; set; }

        [Input("s3SecretAccessKey", required: true)]
        private Input<string>? _s3SecretAccessKey;

        /// <summary>
        /// The corresponding secret to the above access key id.
        /// </summary>
        public Input<string>? S3SecretAccessKey
        {
            get => _s3SecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3SecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public DestinationDatabricksConfigurationDataSourceAmazonS3Args()
        {
        }
        public static new DestinationDatabricksConfigurationDataSourceAmazonS3Args Empty => new DestinationDatabricksConfigurationDataSourceAmazonS3Args();
    }
}
