// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationRedisConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Redis cache type to store data in. must be one of ["hash"]; Default: "hash"
        /// </summary>
        [Input("cacheType")]
        public Input<string>? CacheType { get; set; }

        /// <summary>
        /// Redis host to connect to.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password associated with Redis.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Port of Redis. Default: 6379
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible. Default: false
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// SSL connection modes. 
        ///   &lt;li&gt;&lt;b&gt;verify-full&lt;/b&gt; - This is the most secure mode. Always require encryption and verifies the identity of the source database server
        /// </summary>
        [Input("sslMode")]
        public Input<Inputs.DestinationRedisConfigurationSslModeGetArgs>? SslMode { get; set; }

        /// <summary>
        /// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
        /// </summary>
        [Input("tunnelMethod")]
        public Input<Inputs.DestinationRedisConfigurationTunnelMethodGetArgs>? TunnelMethod { get; set; }

        /// <summary>
        /// Username associated with Redis.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public DestinationRedisConfigurationGetArgs()
        {
        }
        public static new DestinationRedisConfigurationGetArgs Empty => new DestinationRedisConfigurationGetArgs();
    }
}
