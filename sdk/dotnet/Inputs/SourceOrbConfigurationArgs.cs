// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceOrbConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey", required: true)]
        private Input<string>? _apiKey;

        /// <summary>
        /// Orb API Key, issued from the Orb admin console.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at after this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced. Default: 0
        /// </summary>
        [Input("lookbackWindowDays")]
        public Input<int>? LookbackWindowDays { get; set; }

        [Input("numericEventPropertiesKeys")]
        private InputList<string>? _numericEventPropertiesKeys;

        /// <summary>
        /// Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
        /// </summary>
        public InputList<string> NumericEventPropertiesKeys
        {
            get => _numericEventPropertiesKeys ?? (_numericEventPropertiesKeys = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _numericEventPropertiesKeys = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Orb Plan ID to filter subscriptions that should have usage fetched.
        /// </summary>
        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        /// <summary>
        /// UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
        /// </summary>
        [Input("startDate", required: true)]
        public Input<string> StartDate { get; set; } = null!;

        [Input("stringEventPropertiesKeys")]
        private InputList<string>? _stringEventPropertiesKeys;

        /// <summary>
        /// Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
        /// </summary>
        public InputList<string> StringEventPropertiesKeys
        {
            get => _stringEventPropertiesKeys ?? (_stringEventPropertiesKeys = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _stringEventPropertiesKeys = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("subscriptionUsageGroupingKey")]
        private Input<string>? _subscriptionUsageGroupingKey;

        /// <summary>
        /// Property key name to group subscription usage by.
        /// </summary>
        public Input<string>? SubscriptionUsageGroupingKey
        {
            get => _subscriptionUsageGroupingKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _subscriptionUsageGroupingKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SourceOrbConfigurationArgs()
        {
        }
        public static new SourceOrbConfigurationArgs Empty => new SourceOrbConfigurationArgs();
    }
}
