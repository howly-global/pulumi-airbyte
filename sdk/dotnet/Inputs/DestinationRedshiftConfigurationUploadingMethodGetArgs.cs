// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationRedshiftConfigurationUploadingMethodGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;i&gt;(recommended)&lt;/i&gt; Uploads data to S3 and then uses a COPY to insert the data into Redshift. COPY is recommended for production workloads for better speed and scalability. See &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html"&gt;AWS docs&lt;/a&gt; for more details.
        /// </summary>
        [Input("awss3Staging")]
        public Input<Inputs.DestinationRedshiftConfigurationUploadingMethodAwss3StagingGetArgs>? Awss3Staging { get; set; }

        /// <summary>
        /// &lt;i&gt;(not recommended)&lt;/i&gt; Direct loading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In all other cases, you should use S3 uploading.
        /// </summary>
        [Input("standard")]
        public Input<Inputs.DestinationRedshiftConfigurationUploadingMethodStandardGetArgs>? Standard { get; set; }

        public DestinationRedshiftConfigurationUploadingMethodGetArgs()
        {
        }
        public static new DestinationRedshiftConfigurationUploadingMethodGetArgs Empty => new DestinationRedshiftConfigurationUploadingMethodGetArgs();
    }
}
