// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceNetsuiteConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("consumerKey", required: true)]
        private Input<string>? _consumerKey;

        /// <summary>
        /// Consumer key associated with your integration
        /// </summary>
        public Input<string>? ConsumerKey
        {
            get => _consumerKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Consumer secret associated with your integration
        /// </summary>
        [Input("consumerSecret", required: true)]
        public Input<string> ConsumerSecret { get; set; } = null!;

        [Input("objectTypes")]
        private InputList<string>? _objectTypes;

        /// <summary>
        /// The API names of the Netsuite objects you want to sync. Setting this speeds up the connection setup process by limiting the number of schemas that need to be retrieved from Netsuite.
        /// </summary>
        public InputList<string> ObjectTypes
        {
            get => _objectTypes ?? (_objectTypes = new InputList<string>());
            set => _objectTypes = value;
        }

        /// <summary>
        /// Netsuite realm e.g. 2344535, as for `production` or 2344535_SB1, as for the `sandbox`
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        /// <summary>
        /// Starting point for your data replication, in format of "YYYY-MM-DDTHH:mm:ssZ"
        /// </summary>
        [Input("startDatetime", required: true)]
        public Input<string> StartDatetime { get; set; } = null!;

        [Input("tokenKey", required: true)]
        private Input<string>? _tokenKey;

        /// <summary>
        /// Access token key
        /// </summary>
        public Input<string>? TokenKey
        {
            get => _tokenKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenSecret", required: true)]
        private Input<string>? _tokenSecret;

        /// <summary>
        /// Access token secret
        /// </summary>
        public Input<string>? TokenSecret
        {
            get => _tokenSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The amount of days used to query the data with date chunks. Set smaller value, if you have lots of data. Default: 30
        /// </summary>
        [Input("windowInDays")]
        public Input<int>? WindowInDays { get; set; }

        public SourceNetsuiteConfigurationGetArgs()
        {
        }
        public static new SourceNetsuiteConfigurationGetArgs Empty => new SourceNetsuiteConfigurationGetArgs();
    }
}
