// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationWeaviateConfigurationIndexingArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalHeaders")]
        private InputList<Inputs.DestinationWeaviateConfigurationIndexingAdditionalHeaderArgs>? _additionalHeaders;

        /// <summary>
        /// Additional HTTP headers to send with every request.
        /// </summary>
        public InputList<Inputs.DestinationWeaviateConfigurationIndexingAdditionalHeaderArgs> AdditionalHeaders
        {
            get => _additionalHeaders ?? (_additionalHeaders = new InputList<Inputs.DestinationWeaviateConfigurationIndexingAdditionalHeaderArgs>());
            set => _additionalHeaders = value;
        }

        /// <summary>
        /// Authentication method
        /// </summary>
        [Input("auth", required: true)]
        public Input<Inputs.DestinationWeaviateConfigurationIndexingAuthArgs> Auth { get; set; } = null!;

        /// <summary>
        /// The number of records to send to Weaviate in each batch. Default: 128
        /// </summary>
        [Input("batchSize")]
        public Input<int>? BatchSize { get; set; }

        /// <summary>
        /// The vectorizer to use if new classes need to be created. must be one of ["none", "text2vec-cohere", "text2vec-huggingface", "text2vec-openai", "text2vec-palm", "text2vec-contextionary", "text2vec-transformers", "text2vec-gpt4all"]; Default: "none"
        /// </summary>
        [Input("defaultVectorizer")]
        public Input<string>? DefaultVectorizer { get; set; }

        /// <summary>
        /// The public endpoint of the Weaviate cluster.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The tenant ID to use for multi tenancy. Default: ""
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The field in the object that contains the embedded text. Default: "text"
        /// </summary>
        [Input("textField")]
        public Input<string>? TextField { get; set; }

        public DestinationWeaviateConfigurationIndexingArgs()
        {
        }
        public static new DestinationWeaviateConfigurationIndexingArgs Empty => new DestinationWeaviateConfigurationIndexingArgs();
    }
}
