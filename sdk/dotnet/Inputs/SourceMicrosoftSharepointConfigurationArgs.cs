// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceMicrosoftSharepointConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Credentials for connecting to the One Drive API
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.SourceMicrosoftSharepointConfigurationCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items. Default: "."
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both. must be one of ["ACCESSIBLE_DRIVES", "SHARED_ITEMS", "ALL"]; Default: "ALL"
        /// </summary>
        [Input("searchScope")]
        public Input<string>? SearchScope { get; set; }

        /// <summary>
        /// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        [Input("streams", required: true)]
        private InputList<Inputs.SourceMicrosoftSharepointConfigurationStreamArgs>? _streams;

        /// <summary>
        /// Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
        /// </summary>
        public InputList<Inputs.SourceMicrosoftSharepointConfigurationStreamArgs> Streams
        {
            get => _streams ?? (_streams = new InputList<Inputs.SourceMicrosoftSharepointConfigurationStreamArgs>());
            set => _streams = value;
        }

        public SourceMicrosoftSharepointConfigurationArgs()
        {
        }
        public static new SourceMicrosoftSharepointConfigurationArgs Empty => new SourceMicrosoftSharepointConfigurationArgs();
    }
}
