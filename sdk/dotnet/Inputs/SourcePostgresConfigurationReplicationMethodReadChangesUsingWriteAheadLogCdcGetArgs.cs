// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdcGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Parsed as JSON.
        /// </summary>
        [Input("additionalProperties")]
        public Input<string>? AdditionalProperties { get; set; }

        /// <summary>
        /// Specifies a query that the connector executes on the source database when the connector sends a heartbeat message. Please see the &lt;a href="https://docs.airbyte.com/integrations/sources/postgres/postgres-wal-disk-consumption-and-heartbeat-action-query"&gt;setup guide&lt;/a&gt; for how and when to configure this setting. Default: ""
        /// </summary>
        [Input("heartbeatActionQuery")]
        public Input<string>? HeartbeatActionQuery { get; set; }

        /// <summary>
        /// The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 1200 seconds. Valid range: 120 seconds to 2400 seconds. Read about &lt;a href="https://docs.airbyte.com/integrations/sources/postgres#step-5-optional-set-up-initial-waiting-time"&gt;initial waiting time&lt;/a&gt;. Default: 1200
        /// </summary>
        [Input("initialWaitingSeconds")]
        public Input<int>? InitialWaitingSeconds { get; set; }

        /// <summary>
        /// Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. must be one of ["Fail sync", "Re-sync data"]; Default: "Fail sync"
        /// </summary>
        [Input("invalidCdcCursorPositionBehavior")]
        public Input<string>? InvalidCdcCursorPositionBehavior { get; set; }

        /// <summary>
        /// Determines when Airbyte should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync. must be one of ["While reading Data", "After loading Data in the destination"]; Default: "After loading Data in the destination"
        /// </summary>
        [Input("lsnCommitBehaviour")]
        public Input<string>? LsnCommitBehaviour { get; set; }

        /// <summary>
        /// A logical decoding plugin installed on the PostgreSQL server. must be one of ["pgoutput"]; Default: "pgoutput"
        /// </summary>
        [Input("plugin")]
        public Input<string>? Plugin { get; set; }

        /// <summary>
        /// A Postgres publication used for consuming changes. Read about &lt;a href="https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables"&gt;publications and replication identities&lt;/a&gt;.
        /// </summary>
        [Input("publication", required: true)]
        public Input<string> Publication { get; set; } = null!;

        /// <summary>
        /// The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful. Default: 10000
        /// </summary>
        [Input("queueSize")]
        public Input<int>? QueueSize { get; set; }

        /// <summary>
        /// A plugin logical replication slot. Read about &lt;a href="https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot"&gt;replication slots&lt;/a&gt;.
        /// </summary>
        [Input("replicationSlot", required: true)]
        public Input<string> ReplicationSlot { get; set; } = null!;

        public SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdcGetArgs()
        {
        }
        public static new SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdcGetArgs Empty => new SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdcGetArgs();
    }
}
