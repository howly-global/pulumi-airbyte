// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class DestinationWeaviateConfigurationEmbeddingGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
        /// </summary>
        [Input("azureOpenAi")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingAzureOpenAiGetArgs>? AzureOpenAi { get; set; }

        /// <summary>
        /// Use the Cohere API to embed text.
        /// </summary>
        [Input("cohere")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingCohereGetArgs>? Cohere { get; set; }

        /// <summary>
        /// Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
        /// </summary>
        [Input("fake")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingFakeGetArgs>? Fake { get; set; }

        /// <summary>
        /// Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
        /// </summary>
        [Input("fromField")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingFromFieldGetArgs>? FromField { get; set; }

        /// <summary>
        /// Do not calculate and pass embeddings to Weaviate. Suitable for clusters with configured vectorizers to calculate embeddings within Weaviate or for classes that should only support regular text search.
        /// </summary>
        [Input("noExternalEmbedding")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingNoExternalEmbeddingGetArgs>? NoExternalEmbedding { get; set; }

        /// <summary>
        /// Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
        /// </summary>
        [Input("openAi")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingOpenAiGetArgs>? OpenAi { get; set; }

        /// <summary>
        /// Use a service that's compatible with the OpenAI API to embed text.
        /// </summary>
        [Input("openAiCompatible")]
        public Input<Inputs.DestinationWeaviateConfigurationEmbeddingOpenAiCompatibleGetArgs>? OpenAiCompatible { get; set; }

        public DestinationWeaviateConfigurationEmbeddingGetArgs()
        {
        }
        public static new DestinationWeaviateConfigurationEmbeddingGetArgs Empty => new DestinationWeaviateConfigurationEmbeddingGetArgs();
    }
}
