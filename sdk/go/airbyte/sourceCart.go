// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceCart struct {
	pulumi.CustomResourceState

	Configuration SourceCartConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceCart registers a new resource with the given unique name, arguments, and options.
func NewSourceCart(ctx *pulumi.Context,
	name string, args *SourceCartArgs, opts ...pulumi.ResourceOption) (*SourceCart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceCart
	err := ctx.RegisterResource("airbyte:index/sourceCart:SourceCart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceCart gets an existing SourceCart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceCart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceCartState, opts ...pulumi.ResourceOption) (*SourceCart, error) {
	var resource SourceCart
	err := ctx.ReadResource("airbyte:index/sourceCart:SourceCart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceCart resources.
type sourceCartState struct {
	Configuration *SourceCartConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceCartState struct {
	Configuration SourceCartConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceCartState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCartState)(nil)).Elem()
}

type sourceCartArgs struct {
	Configuration SourceCartConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceCart resource.
type SourceCartArgs struct {
	Configuration SourceCartConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceCartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCartArgs)(nil)).Elem()
}

type SourceCartInput interface {
	pulumi.Input

	ToSourceCartOutput() SourceCartOutput
	ToSourceCartOutputWithContext(ctx context.Context) SourceCartOutput
}

func (*SourceCart) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceCart)(nil)).Elem()
}

func (i *SourceCart) ToSourceCartOutput() SourceCartOutput {
	return i.ToSourceCartOutputWithContext(context.Background())
}

func (i *SourceCart) ToSourceCartOutputWithContext(ctx context.Context) SourceCartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCartOutput)
}

// SourceCartArrayInput is an input type that accepts SourceCartArray and SourceCartArrayOutput values.
// You can construct a concrete instance of `SourceCartArrayInput` via:
//
//	SourceCartArray{ SourceCartArgs{...} }
type SourceCartArrayInput interface {
	pulumi.Input

	ToSourceCartArrayOutput() SourceCartArrayOutput
	ToSourceCartArrayOutputWithContext(context.Context) SourceCartArrayOutput
}

type SourceCartArray []SourceCartInput

func (SourceCartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceCart)(nil)).Elem()
}

func (i SourceCartArray) ToSourceCartArrayOutput() SourceCartArrayOutput {
	return i.ToSourceCartArrayOutputWithContext(context.Background())
}

func (i SourceCartArray) ToSourceCartArrayOutputWithContext(ctx context.Context) SourceCartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCartArrayOutput)
}

// SourceCartMapInput is an input type that accepts SourceCartMap and SourceCartMapOutput values.
// You can construct a concrete instance of `SourceCartMapInput` via:
//
//	SourceCartMap{ "key": SourceCartArgs{...} }
type SourceCartMapInput interface {
	pulumi.Input

	ToSourceCartMapOutput() SourceCartMapOutput
	ToSourceCartMapOutputWithContext(context.Context) SourceCartMapOutput
}

type SourceCartMap map[string]SourceCartInput

func (SourceCartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceCart)(nil)).Elem()
}

func (i SourceCartMap) ToSourceCartMapOutput() SourceCartMapOutput {
	return i.ToSourceCartMapOutputWithContext(context.Background())
}

func (i SourceCartMap) ToSourceCartMapOutputWithContext(ctx context.Context) SourceCartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCartMapOutput)
}

type SourceCartOutput struct{ *pulumi.OutputState }

func (SourceCartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceCart)(nil)).Elem()
}

func (o SourceCartOutput) ToSourceCartOutput() SourceCartOutput {
	return o
}

func (o SourceCartOutput) ToSourceCartOutputWithContext(ctx context.Context) SourceCartOutput {
	return o
}

func (o SourceCartOutput) Configuration() SourceCartConfigurationOutput {
	return o.ApplyT(func(v *SourceCart) SourceCartConfigurationOutput { return v.Configuration }).(SourceCartConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceCartOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceCartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceCartOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceCartOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceCartOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceCartOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCart) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceCartArrayOutput struct{ *pulumi.OutputState }

func (SourceCartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceCart)(nil)).Elem()
}

func (o SourceCartArrayOutput) ToSourceCartArrayOutput() SourceCartArrayOutput {
	return o
}

func (o SourceCartArrayOutput) ToSourceCartArrayOutputWithContext(ctx context.Context) SourceCartArrayOutput {
	return o
}

func (o SourceCartArrayOutput) Index(i pulumi.IntInput) SourceCartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceCart {
		return vs[0].([]*SourceCart)[vs[1].(int)]
	}).(SourceCartOutput)
}

type SourceCartMapOutput struct{ *pulumi.OutputState }

func (SourceCartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceCart)(nil)).Elem()
}

func (o SourceCartMapOutput) ToSourceCartMapOutput() SourceCartMapOutput {
	return o
}

func (o SourceCartMapOutput) ToSourceCartMapOutputWithContext(ctx context.Context) SourceCartMapOutput {
	return o
}

func (o SourceCartMapOutput) MapIndex(k pulumi.StringInput) SourceCartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceCart {
		return vs[0].(map[string]*SourceCart)[vs[1].(string)]
	}).(SourceCartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCartInput)(nil)).Elem(), &SourceCart{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCartArrayInput)(nil)).Elem(), SourceCartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCartMapInput)(nil)).Elem(), SourceCartMap{})
	pulumi.RegisterOutputType(SourceCartOutput{})
	pulumi.RegisterOutputType(SourceCartArrayOutput{})
	pulumi.RegisterOutputType(SourceCartMapOutput{})
}
