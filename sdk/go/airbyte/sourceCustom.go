// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceCustom struct {
	pulumi.CustomResourceState

	// The values required to configure the source. Parsed as JSON.
	Configuration pulumi.StringOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceCustom registers a new resource with the given unique name, arguments, and options.
func NewSourceCustom(ctx *pulumi.Context,
	name string, args *SourceCustomArgs, opts ...pulumi.ResourceOption) (*SourceCustom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceCustom
	err := ctx.RegisterResource("airbyte:index/sourceCustom:SourceCustom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceCustom gets an existing SourceCustom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceCustom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceCustomState, opts ...pulumi.ResourceOption) (*SourceCustom, error) {
	var resource SourceCustom
	err := ctx.ReadResource("airbyte:index/sourceCustom:SourceCustom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceCustom resources.
type sourceCustomState struct {
	// The values required to configure the source. Parsed as JSON.
	Configuration *string `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceCustomState struct {
	// The values required to configure the source. Parsed as JSON.
	Configuration pulumi.StringPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceCustomState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCustomState)(nil)).Elem()
}

type sourceCustomArgs struct {
	// The values required to configure the source. Parsed as JSON.
	Configuration string `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceCustom resource.
type SourceCustomArgs struct {
	// The values required to configure the source. Parsed as JSON.
	Configuration pulumi.StringInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceCustomArgs)(nil)).Elem()
}

type SourceCustomInput interface {
	pulumi.Input

	ToSourceCustomOutput() SourceCustomOutput
	ToSourceCustomOutputWithContext(ctx context.Context) SourceCustomOutput
}

func (*SourceCustom) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceCustom)(nil)).Elem()
}

func (i *SourceCustom) ToSourceCustomOutput() SourceCustomOutput {
	return i.ToSourceCustomOutputWithContext(context.Background())
}

func (i *SourceCustom) ToSourceCustomOutputWithContext(ctx context.Context) SourceCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCustomOutput)
}

// SourceCustomArrayInput is an input type that accepts SourceCustomArray and SourceCustomArrayOutput values.
// You can construct a concrete instance of `SourceCustomArrayInput` via:
//
//	SourceCustomArray{ SourceCustomArgs{...} }
type SourceCustomArrayInput interface {
	pulumi.Input

	ToSourceCustomArrayOutput() SourceCustomArrayOutput
	ToSourceCustomArrayOutputWithContext(context.Context) SourceCustomArrayOutput
}

type SourceCustomArray []SourceCustomInput

func (SourceCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceCustom)(nil)).Elem()
}

func (i SourceCustomArray) ToSourceCustomArrayOutput() SourceCustomArrayOutput {
	return i.ToSourceCustomArrayOutputWithContext(context.Background())
}

func (i SourceCustomArray) ToSourceCustomArrayOutputWithContext(ctx context.Context) SourceCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCustomArrayOutput)
}

// SourceCustomMapInput is an input type that accepts SourceCustomMap and SourceCustomMapOutput values.
// You can construct a concrete instance of `SourceCustomMapInput` via:
//
//	SourceCustomMap{ "key": SourceCustomArgs{...} }
type SourceCustomMapInput interface {
	pulumi.Input

	ToSourceCustomMapOutput() SourceCustomMapOutput
	ToSourceCustomMapOutputWithContext(context.Context) SourceCustomMapOutput
}

type SourceCustomMap map[string]SourceCustomInput

func (SourceCustomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceCustom)(nil)).Elem()
}

func (i SourceCustomMap) ToSourceCustomMapOutput() SourceCustomMapOutput {
	return i.ToSourceCustomMapOutputWithContext(context.Background())
}

func (i SourceCustomMap) ToSourceCustomMapOutputWithContext(ctx context.Context) SourceCustomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCustomMapOutput)
}

type SourceCustomOutput struct{ *pulumi.OutputState }

func (SourceCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceCustom)(nil)).Elem()
}

func (o SourceCustomOutput) ToSourceCustomOutput() SourceCustomOutput {
	return o
}

func (o SourceCustomOutput) ToSourceCustomOutputWithContext(ctx context.Context) SourceCustomOutput {
	return o
}

// The values required to configure the source. Parsed as JSON.
func (o SourceCustomOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringOutput { return v.Configuration }).(pulumi.StringOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceCustomOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceCustomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceCustomOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceCustomOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceCustomOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceCustomOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceCustom) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceCustomArrayOutput struct{ *pulumi.OutputState }

func (SourceCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceCustom)(nil)).Elem()
}

func (o SourceCustomArrayOutput) ToSourceCustomArrayOutput() SourceCustomArrayOutput {
	return o
}

func (o SourceCustomArrayOutput) ToSourceCustomArrayOutputWithContext(ctx context.Context) SourceCustomArrayOutput {
	return o
}

func (o SourceCustomArrayOutput) Index(i pulumi.IntInput) SourceCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceCustom {
		return vs[0].([]*SourceCustom)[vs[1].(int)]
	}).(SourceCustomOutput)
}

type SourceCustomMapOutput struct{ *pulumi.OutputState }

func (SourceCustomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceCustom)(nil)).Elem()
}

func (o SourceCustomMapOutput) ToSourceCustomMapOutput() SourceCustomMapOutput {
	return o
}

func (o SourceCustomMapOutput) ToSourceCustomMapOutputWithContext(ctx context.Context) SourceCustomMapOutput {
	return o
}

func (o SourceCustomMapOutput) MapIndex(k pulumi.StringInput) SourceCustomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceCustom {
		return vs[0].(map[string]*SourceCustom)[vs[1].(string)]
	}).(SourceCustomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCustomInput)(nil)).Elem(), &SourceCustom{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCustomArrayInput)(nil)).Elem(), SourceCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceCustomMapInput)(nil)).Elem(), SourceCustomMap{})
	pulumi.RegisterOutputType(SourceCustomOutput{})
	pulumi.RegisterOutputType(SourceCustomArrayOutput{})
	pulumi.RegisterOutputType(SourceCustomMapOutput{})
}
