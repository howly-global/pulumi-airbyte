// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationCustom struct {
	pulumi.CustomResourceState

	// The values required to configure the destination. Parsed as JSON.
	Configuration pulumi.StringOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationCustom registers a new resource with the given unique name, arguments, and options.
func NewDestinationCustom(ctx *pulumi.Context,
	name string, args *DestinationCustomArgs, opts ...pulumi.ResourceOption) (*DestinationCustom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationCustom
	err := ctx.RegisterResource("airbyte:index/destinationCustom:DestinationCustom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationCustom gets an existing DestinationCustom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationCustom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationCustomState, opts ...pulumi.ResourceOption) (*DestinationCustom, error) {
	var resource DestinationCustom
	err := ctx.ReadResource("airbyte:index/destinationCustom:DestinationCustom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationCustom resources.
type destinationCustomState struct {
	// The values required to configure the destination. Parsed as JSON.
	Configuration *string `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationCustomState struct {
	// The values required to configure the destination. Parsed as JSON.
	Configuration pulumi.StringPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationCustomState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationCustomState)(nil)).Elem()
}

type destinationCustomArgs struct {
	// The values required to configure the destination. Parsed as JSON.
	Configuration string `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationCustom resource.
type DestinationCustomArgs struct {
	// The values required to configure the destination. Parsed as JSON.
	Configuration pulumi.StringInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationCustomArgs)(nil)).Elem()
}

type DestinationCustomInput interface {
	pulumi.Input

	ToDestinationCustomOutput() DestinationCustomOutput
	ToDestinationCustomOutputWithContext(ctx context.Context) DestinationCustomOutput
}

func (*DestinationCustom) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationCustom)(nil)).Elem()
}

func (i *DestinationCustom) ToDestinationCustomOutput() DestinationCustomOutput {
	return i.ToDestinationCustomOutputWithContext(context.Background())
}

func (i *DestinationCustom) ToDestinationCustomOutputWithContext(ctx context.Context) DestinationCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCustomOutput)
}

// DestinationCustomArrayInput is an input type that accepts DestinationCustomArray and DestinationCustomArrayOutput values.
// You can construct a concrete instance of `DestinationCustomArrayInput` via:
//
//	DestinationCustomArray{ DestinationCustomArgs{...} }
type DestinationCustomArrayInput interface {
	pulumi.Input

	ToDestinationCustomArrayOutput() DestinationCustomArrayOutput
	ToDestinationCustomArrayOutputWithContext(context.Context) DestinationCustomArrayOutput
}

type DestinationCustomArray []DestinationCustomInput

func (DestinationCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationCustom)(nil)).Elem()
}

func (i DestinationCustomArray) ToDestinationCustomArrayOutput() DestinationCustomArrayOutput {
	return i.ToDestinationCustomArrayOutputWithContext(context.Background())
}

func (i DestinationCustomArray) ToDestinationCustomArrayOutputWithContext(ctx context.Context) DestinationCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCustomArrayOutput)
}

// DestinationCustomMapInput is an input type that accepts DestinationCustomMap and DestinationCustomMapOutput values.
// You can construct a concrete instance of `DestinationCustomMapInput` via:
//
//	DestinationCustomMap{ "key": DestinationCustomArgs{...} }
type DestinationCustomMapInput interface {
	pulumi.Input

	ToDestinationCustomMapOutput() DestinationCustomMapOutput
	ToDestinationCustomMapOutputWithContext(context.Context) DestinationCustomMapOutput
}

type DestinationCustomMap map[string]DestinationCustomInput

func (DestinationCustomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationCustom)(nil)).Elem()
}

func (i DestinationCustomMap) ToDestinationCustomMapOutput() DestinationCustomMapOutput {
	return i.ToDestinationCustomMapOutputWithContext(context.Background())
}

func (i DestinationCustomMap) ToDestinationCustomMapOutputWithContext(ctx context.Context) DestinationCustomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCustomMapOutput)
}

type DestinationCustomOutput struct{ *pulumi.OutputState }

func (DestinationCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationCustom)(nil)).Elem()
}

func (o DestinationCustomOutput) ToDestinationCustomOutput() DestinationCustomOutput {
	return o
}

func (o DestinationCustomOutput) ToDestinationCustomOutputWithContext(ctx context.Context) DestinationCustomOutput {
	return o
}

// The values required to configure the destination. Parsed as JSON.
func (o DestinationCustomOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringOutput { return v.Configuration }).(pulumi.StringOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationCustomOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationCustomOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationCustomOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationCustomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationCustomOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCustom) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationCustomArrayOutput struct{ *pulumi.OutputState }

func (DestinationCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationCustom)(nil)).Elem()
}

func (o DestinationCustomArrayOutput) ToDestinationCustomArrayOutput() DestinationCustomArrayOutput {
	return o
}

func (o DestinationCustomArrayOutput) ToDestinationCustomArrayOutputWithContext(ctx context.Context) DestinationCustomArrayOutput {
	return o
}

func (o DestinationCustomArrayOutput) Index(i pulumi.IntInput) DestinationCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationCustom {
		return vs[0].([]*DestinationCustom)[vs[1].(int)]
	}).(DestinationCustomOutput)
}

type DestinationCustomMapOutput struct{ *pulumi.OutputState }

func (DestinationCustomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationCustom)(nil)).Elem()
}

func (o DestinationCustomMapOutput) ToDestinationCustomMapOutput() DestinationCustomMapOutput {
	return o
}

func (o DestinationCustomMapOutput) ToDestinationCustomMapOutputWithContext(ctx context.Context) DestinationCustomMapOutput {
	return o
}

func (o DestinationCustomMapOutput) MapIndex(k pulumi.StringInput) DestinationCustomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationCustom {
		return vs[0].(map[string]*DestinationCustom)[vs[1].(string)]
	}).(DestinationCustomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCustomInput)(nil)).Elem(), &DestinationCustom{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCustomArrayInput)(nil)).Elem(), DestinationCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCustomMapInput)(nil)).Elem(), DestinationCustomMap{})
	pulumi.RegisterOutputType(DestinationCustomOutput{})
	pulumi.RegisterOutputType(DestinationCustomArrayOutput{})
	pulumi.RegisterOutputType(DestinationCustomMapOutput{})
}
