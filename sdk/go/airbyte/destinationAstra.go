// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationAstra struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationAstraConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationAstra registers a new resource with the given unique name, arguments, and options.
func NewDestinationAstra(ctx *pulumi.Context,
	name string, args *DestinationAstraArgs, opts ...pulumi.ResourceOption) (*DestinationAstra, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationAstra
	err := ctx.RegisterResource("airbyte:index/destinationAstra:DestinationAstra", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationAstra gets an existing DestinationAstra resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationAstra(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationAstraState, opts ...pulumi.ResourceOption) (*DestinationAstra, error) {
	var resource DestinationAstra
	err := ctx.ReadResource("airbyte:index/destinationAstra:DestinationAstra", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationAstra resources.
type destinationAstraState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationAstraConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationAstraState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationAstraConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationAstraState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAstraState)(nil)).Elem()
}

type destinationAstraArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationAstraConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationAstra resource.
type DestinationAstraArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationAstraConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationAstraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAstraArgs)(nil)).Elem()
}

type DestinationAstraInput interface {
	pulumi.Input

	ToDestinationAstraOutput() DestinationAstraOutput
	ToDestinationAstraOutputWithContext(ctx context.Context) DestinationAstraOutput
}

func (*DestinationAstra) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAstra)(nil)).Elem()
}

func (i *DestinationAstra) ToDestinationAstraOutput() DestinationAstraOutput {
	return i.ToDestinationAstraOutputWithContext(context.Background())
}

func (i *DestinationAstra) ToDestinationAstraOutputWithContext(ctx context.Context) DestinationAstraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAstraOutput)
}

// DestinationAstraArrayInput is an input type that accepts DestinationAstraArray and DestinationAstraArrayOutput values.
// You can construct a concrete instance of `DestinationAstraArrayInput` via:
//
//	DestinationAstraArray{ DestinationAstraArgs{...} }
type DestinationAstraArrayInput interface {
	pulumi.Input

	ToDestinationAstraArrayOutput() DestinationAstraArrayOutput
	ToDestinationAstraArrayOutputWithContext(context.Context) DestinationAstraArrayOutput
}

type DestinationAstraArray []DestinationAstraInput

func (DestinationAstraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAstra)(nil)).Elem()
}

func (i DestinationAstraArray) ToDestinationAstraArrayOutput() DestinationAstraArrayOutput {
	return i.ToDestinationAstraArrayOutputWithContext(context.Background())
}

func (i DestinationAstraArray) ToDestinationAstraArrayOutputWithContext(ctx context.Context) DestinationAstraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAstraArrayOutput)
}

// DestinationAstraMapInput is an input type that accepts DestinationAstraMap and DestinationAstraMapOutput values.
// You can construct a concrete instance of `DestinationAstraMapInput` via:
//
//	DestinationAstraMap{ "key": DestinationAstraArgs{...} }
type DestinationAstraMapInput interface {
	pulumi.Input

	ToDestinationAstraMapOutput() DestinationAstraMapOutput
	ToDestinationAstraMapOutputWithContext(context.Context) DestinationAstraMapOutput
}

type DestinationAstraMap map[string]DestinationAstraInput

func (DestinationAstraMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAstra)(nil)).Elem()
}

func (i DestinationAstraMap) ToDestinationAstraMapOutput() DestinationAstraMapOutput {
	return i.ToDestinationAstraMapOutputWithContext(context.Background())
}

func (i DestinationAstraMap) ToDestinationAstraMapOutputWithContext(ctx context.Context) DestinationAstraMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAstraMapOutput)
}

type DestinationAstraOutput struct{ *pulumi.OutputState }

func (DestinationAstraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAstra)(nil)).Elem()
}

func (o DestinationAstraOutput) ToDestinationAstraOutput() DestinationAstraOutput {
	return o
}

func (o DestinationAstraOutput) ToDestinationAstraOutputWithContext(ctx context.Context) DestinationAstraOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationAstraOutput) Configuration() DestinationAstraConfigurationOutput {
	return o.ApplyT(func(v *DestinationAstra) DestinationAstraConfigurationOutput { return v.Configuration }).(DestinationAstraConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationAstraOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationAstra) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationAstraOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAstra) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationAstraOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAstra) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationAstraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAstra) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationAstraOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAstra) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationAstraArrayOutput struct{ *pulumi.OutputState }

func (DestinationAstraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAstra)(nil)).Elem()
}

func (o DestinationAstraArrayOutput) ToDestinationAstraArrayOutput() DestinationAstraArrayOutput {
	return o
}

func (o DestinationAstraArrayOutput) ToDestinationAstraArrayOutputWithContext(ctx context.Context) DestinationAstraArrayOutput {
	return o
}

func (o DestinationAstraArrayOutput) Index(i pulumi.IntInput) DestinationAstraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationAstra {
		return vs[0].([]*DestinationAstra)[vs[1].(int)]
	}).(DestinationAstraOutput)
}

type DestinationAstraMapOutput struct{ *pulumi.OutputState }

func (DestinationAstraMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAstra)(nil)).Elem()
}

func (o DestinationAstraMapOutput) ToDestinationAstraMapOutput() DestinationAstraMapOutput {
	return o
}

func (o DestinationAstraMapOutput) ToDestinationAstraMapOutputWithContext(ctx context.Context) DestinationAstraMapOutput {
	return o
}

func (o DestinationAstraMapOutput) MapIndex(k pulumi.StringInput) DestinationAstraOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationAstra {
		return vs[0].(map[string]*DestinationAstra)[vs[1].(string)]
	}).(DestinationAstraOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAstraInput)(nil)).Elem(), &DestinationAstra{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAstraArrayInput)(nil)).Elem(), DestinationAstraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAstraMapInput)(nil)).Elem(), DestinationAstraMap{})
	pulumi.RegisterOutputType(DestinationAstraOutput{})
	pulumi.RegisterOutputType(DestinationAstraArrayOutput{})
	pulumi.RegisterOutputType(DestinationAstraMapOutput{})
}
