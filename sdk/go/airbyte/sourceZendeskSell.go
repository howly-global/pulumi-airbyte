// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceZendeskSell struct {
	pulumi.CustomResourceState

	Configuration SourceZendeskSellConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceZendeskSell registers a new resource with the given unique name, arguments, and options.
func NewSourceZendeskSell(ctx *pulumi.Context,
	name string, args *SourceZendeskSellArgs, opts ...pulumi.ResourceOption) (*SourceZendeskSell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceZendeskSell
	err := ctx.RegisterResource("airbyte:index/sourceZendeskSell:SourceZendeskSell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceZendeskSell gets an existing SourceZendeskSell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceZendeskSell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceZendeskSellState, opts ...pulumi.ResourceOption) (*SourceZendeskSell, error) {
	var resource SourceZendeskSell
	err := ctx.ReadResource("airbyte:index/sourceZendeskSell:SourceZendeskSell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceZendeskSell resources.
type sourceZendeskSellState struct {
	Configuration *SourceZendeskSellConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceZendeskSellState struct {
	Configuration SourceZendeskSellConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceZendeskSellState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZendeskSellState)(nil)).Elem()
}

type sourceZendeskSellArgs struct {
	Configuration SourceZendeskSellConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceZendeskSell resource.
type SourceZendeskSellArgs struct {
	Configuration SourceZendeskSellConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceZendeskSellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceZendeskSellArgs)(nil)).Elem()
}

type SourceZendeskSellInput interface {
	pulumi.Input

	ToSourceZendeskSellOutput() SourceZendeskSellOutput
	ToSourceZendeskSellOutputWithContext(ctx context.Context) SourceZendeskSellOutput
}

func (*SourceZendeskSell) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZendeskSell)(nil)).Elem()
}

func (i *SourceZendeskSell) ToSourceZendeskSellOutput() SourceZendeskSellOutput {
	return i.ToSourceZendeskSellOutputWithContext(context.Background())
}

func (i *SourceZendeskSell) ToSourceZendeskSellOutputWithContext(ctx context.Context) SourceZendeskSellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSellOutput)
}

// SourceZendeskSellArrayInput is an input type that accepts SourceZendeskSellArray and SourceZendeskSellArrayOutput values.
// You can construct a concrete instance of `SourceZendeskSellArrayInput` via:
//
//	SourceZendeskSellArray{ SourceZendeskSellArgs{...} }
type SourceZendeskSellArrayInput interface {
	pulumi.Input

	ToSourceZendeskSellArrayOutput() SourceZendeskSellArrayOutput
	ToSourceZendeskSellArrayOutputWithContext(context.Context) SourceZendeskSellArrayOutput
}

type SourceZendeskSellArray []SourceZendeskSellInput

func (SourceZendeskSellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZendeskSell)(nil)).Elem()
}

func (i SourceZendeskSellArray) ToSourceZendeskSellArrayOutput() SourceZendeskSellArrayOutput {
	return i.ToSourceZendeskSellArrayOutputWithContext(context.Background())
}

func (i SourceZendeskSellArray) ToSourceZendeskSellArrayOutputWithContext(ctx context.Context) SourceZendeskSellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSellArrayOutput)
}

// SourceZendeskSellMapInput is an input type that accepts SourceZendeskSellMap and SourceZendeskSellMapOutput values.
// You can construct a concrete instance of `SourceZendeskSellMapInput` via:
//
//	SourceZendeskSellMap{ "key": SourceZendeskSellArgs{...} }
type SourceZendeskSellMapInput interface {
	pulumi.Input

	ToSourceZendeskSellMapOutput() SourceZendeskSellMapOutput
	ToSourceZendeskSellMapOutputWithContext(context.Context) SourceZendeskSellMapOutput
}

type SourceZendeskSellMap map[string]SourceZendeskSellInput

func (SourceZendeskSellMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZendeskSell)(nil)).Elem()
}

func (i SourceZendeskSellMap) ToSourceZendeskSellMapOutput() SourceZendeskSellMapOutput {
	return i.ToSourceZendeskSellMapOutputWithContext(context.Background())
}

func (i SourceZendeskSellMap) ToSourceZendeskSellMapOutputWithContext(ctx context.Context) SourceZendeskSellMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceZendeskSellMapOutput)
}

type SourceZendeskSellOutput struct{ *pulumi.OutputState }

func (SourceZendeskSellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceZendeskSell)(nil)).Elem()
}

func (o SourceZendeskSellOutput) ToSourceZendeskSellOutput() SourceZendeskSellOutput {
	return o
}

func (o SourceZendeskSellOutput) ToSourceZendeskSellOutputWithContext(ctx context.Context) SourceZendeskSellOutput {
	return o
}

func (o SourceZendeskSellOutput) Configuration() SourceZendeskSellConfigurationOutput {
	return o.ApplyT(func(v *SourceZendeskSell) SourceZendeskSellConfigurationOutput { return v.Configuration }).(SourceZendeskSellConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceZendeskSellOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceZendeskSellOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceZendeskSellOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceZendeskSellOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceZendeskSellOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceZendeskSellOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceZendeskSell) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceZendeskSellArrayOutput struct{ *pulumi.OutputState }

func (SourceZendeskSellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceZendeskSell)(nil)).Elem()
}

func (o SourceZendeskSellArrayOutput) ToSourceZendeskSellArrayOutput() SourceZendeskSellArrayOutput {
	return o
}

func (o SourceZendeskSellArrayOutput) ToSourceZendeskSellArrayOutputWithContext(ctx context.Context) SourceZendeskSellArrayOutput {
	return o
}

func (o SourceZendeskSellArrayOutput) Index(i pulumi.IntInput) SourceZendeskSellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceZendeskSell {
		return vs[0].([]*SourceZendeskSell)[vs[1].(int)]
	}).(SourceZendeskSellOutput)
}

type SourceZendeskSellMapOutput struct{ *pulumi.OutputState }

func (SourceZendeskSellMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceZendeskSell)(nil)).Elem()
}

func (o SourceZendeskSellMapOutput) ToSourceZendeskSellMapOutput() SourceZendeskSellMapOutput {
	return o
}

func (o SourceZendeskSellMapOutput) ToSourceZendeskSellMapOutputWithContext(ctx context.Context) SourceZendeskSellMapOutput {
	return o
}

func (o SourceZendeskSellMapOutput) MapIndex(k pulumi.StringInput) SourceZendeskSellOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceZendeskSell {
		return vs[0].(map[string]*SourceZendeskSell)[vs[1].(string)]
	}).(SourceZendeskSellOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSellInput)(nil)).Elem(), &SourceZendeskSell{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSellArrayInput)(nil)).Elem(), SourceZendeskSellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceZendeskSellMapInput)(nil)).Elem(), SourceZendeskSellMap{})
	pulumi.RegisterOutputType(SourceZendeskSellOutput{})
	pulumi.RegisterOutputType(SourceZendeskSellArrayOutput{})
	pulumi.RegisterOutputType(SourceZendeskSellMapOutput{})
}
