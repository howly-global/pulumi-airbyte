// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationWeaviate struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationWeaviateConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationWeaviate registers a new resource with the given unique name, arguments, and options.
func NewDestinationWeaviate(ctx *pulumi.Context,
	name string, args *DestinationWeaviateArgs, opts ...pulumi.ResourceOption) (*DestinationWeaviate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationWeaviate
	err := ctx.RegisterResource("airbyte:index/destinationWeaviate:DestinationWeaviate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationWeaviate gets an existing DestinationWeaviate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationWeaviate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationWeaviateState, opts ...pulumi.ResourceOption) (*DestinationWeaviate, error) {
	var resource DestinationWeaviate
	err := ctx.ReadResource("airbyte:index/destinationWeaviate:DestinationWeaviate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationWeaviate resources.
type destinationWeaviateState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationWeaviateConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationWeaviateState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationWeaviateConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationWeaviateState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationWeaviateState)(nil)).Elem()
}

type destinationWeaviateArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationWeaviateConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationWeaviate resource.
type DestinationWeaviateArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationWeaviateConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationWeaviateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationWeaviateArgs)(nil)).Elem()
}

type DestinationWeaviateInput interface {
	pulumi.Input

	ToDestinationWeaviateOutput() DestinationWeaviateOutput
	ToDestinationWeaviateOutputWithContext(ctx context.Context) DestinationWeaviateOutput
}

func (*DestinationWeaviate) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationWeaviate)(nil)).Elem()
}

func (i *DestinationWeaviate) ToDestinationWeaviateOutput() DestinationWeaviateOutput {
	return i.ToDestinationWeaviateOutputWithContext(context.Background())
}

func (i *DestinationWeaviate) ToDestinationWeaviateOutputWithContext(ctx context.Context) DestinationWeaviateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationWeaviateOutput)
}

// DestinationWeaviateArrayInput is an input type that accepts DestinationWeaviateArray and DestinationWeaviateArrayOutput values.
// You can construct a concrete instance of `DestinationWeaviateArrayInput` via:
//
//	DestinationWeaviateArray{ DestinationWeaviateArgs{...} }
type DestinationWeaviateArrayInput interface {
	pulumi.Input

	ToDestinationWeaviateArrayOutput() DestinationWeaviateArrayOutput
	ToDestinationWeaviateArrayOutputWithContext(context.Context) DestinationWeaviateArrayOutput
}

type DestinationWeaviateArray []DestinationWeaviateInput

func (DestinationWeaviateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationWeaviate)(nil)).Elem()
}

func (i DestinationWeaviateArray) ToDestinationWeaviateArrayOutput() DestinationWeaviateArrayOutput {
	return i.ToDestinationWeaviateArrayOutputWithContext(context.Background())
}

func (i DestinationWeaviateArray) ToDestinationWeaviateArrayOutputWithContext(ctx context.Context) DestinationWeaviateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationWeaviateArrayOutput)
}

// DestinationWeaviateMapInput is an input type that accepts DestinationWeaviateMap and DestinationWeaviateMapOutput values.
// You can construct a concrete instance of `DestinationWeaviateMapInput` via:
//
//	DestinationWeaviateMap{ "key": DestinationWeaviateArgs{...} }
type DestinationWeaviateMapInput interface {
	pulumi.Input

	ToDestinationWeaviateMapOutput() DestinationWeaviateMapOutput
	ToDestinationWeaviateMapOutputWithContext(context.Context) DestinationWeaviateMapOutput
}

type DestinationWeaviateMap map[string]DestinationWeaviateInput

func (DestinationWeaviateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationWeaviate)(nil)).Elem()
}

func (i DestinationWeaviateMap) ToDestinationWeaviateMapOutput() DestinationWeaviateMapOutput {
	return i.ToDestinationWeaviateMapOutputWithContext(context.Background())
}

func (i DestinationWeaviateMap) ToDestinationWeaviateMapOutputWithContext(ctx context.Context) DestinationWeaviateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationWeaviateMapOutput)
}

type DestinationWeaviateOutput struct{ *pulumi.OutputState }

func (DestinationWeaviateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationWeaviate)(nil)).Elem()
}

func (o DestinationWeaviateOutput) ToDestinationWeaviateOutput() DestinationWeaviateOutput {
	return o
}

func (o DestinationWeaviateOutput) ToDestinationWeaviateOutputWithContext(ctx context.Context) DestinationWeaviateOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationWeaviateOutput) Configuration() DestinationWeaviateConfigurationOutput {
	return o.ApplyT(func(v *DestinationWeaviate) DestinationWeaviateConfigurationOutput { return v.Configuration }).(DestinationWeaviateConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationWeaviateOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationWeaviate) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationWeaviateOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationWeaviate) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationWeaviateOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationWeaviate) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationWeaviateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationWeaviate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationWeaviateOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationWeaviate) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationWeaviateArrayOutput struct{ *pulumi.OutputState }

func (DestinationWeaviateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationWeaviate)(nil)).Elem()
}

func (o DestinationWeaviateArrayOutput) ToDestinationWeaviateArrayOutput() DestinationWeaviateArrayOutput {
	return o
}

func (o DestinationWeaviateArrayOutput) ToDestinationWeaviateArrayOutputWithContext(ctx context.Context) DestinationWeaviateArrayOutput {
	return o
}

func (o DestinationWeaviateArrayOutput) Index(i pulumi.IntInput) DestinationWeaviateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationWeaviate {
		return vs[0].([]*DestinationWeaviate)[vs[1].(int)]
	}).(DestinationWeaviateOutput)
}

type DestinationWeaviateMapOutput struct{ *pulumi.OutputState }

func (DestinationWeaviateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationWeaviate)(nil)).Elem()
}

func (o DestinationWeaviateMapOutput) ToDestinationWeaviateMapOutput() DestinationWeaviateMapOutput {
	return o
}

func (o DestinationWeaviateMapOutput) ToDestinationWeaviateMapOutputWithContext(ctx context.Context) DestinationWeaviateMapOutput {
	return o
}

func (o DestinationWeaviateMapOutput) MapIndex(k pulumi.StringInput) DestinationWeaviateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationWeaviate {
		return vs[0].(map[string]*DestinationWeaviate)[vs[1].(string)]
	}).(DestinationWeaviateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationWeaviateInput)(nil)).Elem(), &DestinationWeaviate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationWeaviateArrayInput)(nil)).Elem(), DestinationWeaviateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationWeaviateMapInput)(nil)).Elem(), DestinationWeaviateMap{})
	pulumi.RegisterOutputType(DestinationWeaviateOutput{})
	pulumi.RegisterOutputType(DestinationWeaviateArrayOutput{})
	pulumi.RegisterOutputType(DestinationWeaviateMapOutput{})
}
