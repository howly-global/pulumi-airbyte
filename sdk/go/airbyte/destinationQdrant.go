// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationQdrant struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationQdrantConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationQdrant registers a new resource with the given unique name, arguments, and options.
func NewDestinationQdrant(ctx *pulumi.Context,
	name string, args *DestinationQdrantArgs, opts ...pulumi.ResourceOption) (*DestinationQdrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationQdrant
	err := ctx.RegisterResource("airbyte:index/destinationQdrant:DestinationQdrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationQdrant gets an existing DestinationQdrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationQdrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationQdrantState, opts ...pulumi.ResourceOption) (*DestinationQdrant, error) {
	var resource DestinationQdrant
	err := ctx.ReadResource("airbyte:index/destinationQdrant:DestinationQdrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationQdrant resources.
type destinationQdrantState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationQdrantConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationQdrantState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationQdrantConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationQdrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationQdrantState)(nil)).Elem()
}

type destinationQdrantArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationQdrantConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationQdrant resource.
type DestinationQdrantArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationQdrantConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationQdrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationQdrantArgs)(nil)).Elem()
}

type DestinationQdrantInput interface {
	pulumi.Input

	ToDestinationQdrantOutput() DestinationQdrantOutput
	ToDestinationQdrantOutputWithContext(ctx context.Context) DestinationQdrantOutput
}

func (*DestinationQdrant) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationQdrant)(nil)).Elem()
}

func (i *DestinationQdrant) ToDestinationQdrantOutput() DestinationQdrantOutput {
	return i.ToDestinationQdrantOutputWithContext(context.Background())
}

func (i *DestinationQdrant) ToDestinationQdrantOutputWithContext(ctx context.Context) DestinationQdrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationQdrantOutput)
}

// DestinationQdrantArrayInput is an input type that accepts DestinationQdrantArray and DestinationQdrantArrayOutput values.
// You can construct a concrete instance of `DestinationQdrantArrayInput` via:
//
//	DestinationQdrantArray{ DestinationQdrantArgs{...} }
type DestinationQdrantArrayInput interface {
	pulumi.Input

	ToDestinationQdrantArrayOutput() DestinationQdrantArrayOutput
	ToDestinationQdrantArrayOutputWithContext(context.Context) DestinationQdrantArrayOutput
}

type DestinationQdrantArray []DestinationQdrantInput

func (DestinationQdrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationQdrant)(nil)).Elem()
}

func (i DestinationQdrantArray) ToDestinationQdrantArrayOutput() DestinationQdrantArrayOutput {
	return i.ToDestinationQdrantArrayOutputWithContext(context.Background())
}

func (i DestinationQdrantArray) ToDestinationQdrantArrayOutputWithContext(ctx context.Context) DestinationQdrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationQdrantArrayOutput)
}

// DestinationQdrantMapInput is an input type that accepts DestinationQdrantMap and DestinationQdrantMapOutput values.
// You can construct a concrete instance of `DestinationQdrantMapInput` via:
//
//	DestinationQdrantMap{ "key": DestinationQdrantArgs{...} }
type DestinationQdrantMapInput interface {
	pulumi.Input

	ToDestinationQdrantMapOutput() DestinationQdrantMapOutput
	ToDestinationQdrantMapOutputWithContext(context.Context) DestinationQdrantMapOutput
}

type DestinationQdrantMap map[string]DestinationQdrantInput

func (DestinationQdrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationQdrant)(nil)).Elem()
}

func (i DestinationQdrantMap) ToDestinationQdrantMapOutput() DestinationQdrantMapOutput {
	return i.ToDestinationQdrantMapOutputWithContext(context.Background())
}

func (i DestinationQdrantMap) ToDestinationQdrantMapOutputWithContext(ctx context.Context) DestinationQdrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationQdrantMapOutput)
}

type DestinationQdrantOutput struct{ *pulumi.OutputState }

func (DestinationQdrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationQdrant)(nil)).Elem()
}

func (o DestinationQdrantOutput) ToDestinationQdrantOutput() DestinationQdrantOutput {
	return o
}

func (o DestinationQdrantOutput) ToDestinationQdrantOutputWithContext(ctx context.Context) DestinationQdrantOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationQdrantOutput) Configuration() DestinationQdrantConfigurationOutput {
	return o.ApplyT(func(v *DestinationQdrant) DestinationQdrantConfigurationOutput { return v.Configuration }).(DestinationQdrantConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationQdrantOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationQdrant) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationQdrantOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationQdrant) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationQdrantOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationQdrant) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationQdrantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationQdrant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationQdrantOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationQdrant) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationQdrantArrayOutput struct{ *pulumi.OutputState }

func (DestinationQdrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationQdrant)(nil)).Elem()
}

func (o DestinationQdrantArrayOutput) ToDestinationQdrantArrayOutput() DestinationQdrantArrayOutput {
	return o
}

func (o DestinationQdrantArrayOutput) ToDestinationQdrantArrayOutputWithContext(ctx context.Context) DestinationQdrantArrayOutput {
	return o
}

func (o DestinationQdrantArrayOutput) Index(i pulumi.IntInput) DestinationQdrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationQdrant {
		return vs[0].([]*DestinationQdrant)[vs[1].(int)]
	}).(DestinationQdrantOutput)
}

type DestinationQdrantMapOutput struct{ *pulumi.OutputState }

func (DestinationQdrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationQdrant)(nil)).Elem()
}

func (o DestinationQdrantMapOutput) ToDestinationQdrantMapOutput() DestinationQdrantMapOutput {
	return o
}

func (o DestinationQdrantMapOutput) ToDestinationQdrantMapOutputWithContext(ctx context.Context) DestinationQdrantMapOutput {
	return o
}

func (o DestinationQdrantMapOutput) MapIndex(k pulumi.StringInput) DestinationQdrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationQdrant {
		return vs[0].(map[string]*DestinationQdrant)[vs[1].(string)]
	}).(DestinationQdrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationQdrantInput)(nil)).Elem(), &DestinationQdrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationQdrantArrayInput)(nil)).Elem(), DestinationQdrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationQdrantMapInput)(nil)).Elem(), DestinationQdrantMap{})
	pulumi.RegisterOutputType(DestinationQdrantOutput{})
	pulumi.RegisterOutputType(DestinationQdrantArrayOutput{})
	pulumi.RegisterOutputType(DestinationQdrantMapOutput{})
}
