// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationAwsDatalake struct {
	pulumi.CustomResourceState

	Configuration DestinationAwsDatalakeConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationAwsDatalake registers a new resource with the given unique name, arguments, and options.
func NewDestinationAwsDatalake(ctx *pulumi.Context,
	name string, args *DestinationAwsDatalakeArgs, opts ...pulumi.ResourceOption) (*DestinationAwsDatalake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationAwsDatalake
	err := ctx.RegisterResource("airbyte:index/destinationAwsDatalake:DestinationAwsDatalake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationAwsDatalake gets an existing DestinationAwsDatalake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationAwsDatalake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationAwsDatalakeState, opts ...pulumi.ResourceOption) (*DestinationAwsDatalake, error) {
	var resource DestinationAwsDatalake
	err := ctx.ReadResource("airbyte:index/destinationAwsDatalake:DestinationAwsDatalake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationAwsDatalake resources.
type destinationAwsDatalakeState struct {
	Configuration *DestinationAwsDatalakeConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationAwsDatalakeState struct {
	Configuration DestinationAwsDatalakeConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationAwsDatalakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAwsDatalakeState)(nil)).Elem()
}

type destinationAwsDatalakeArgs struct {
	Configuration DestinationAwsDatalakeConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationAwsDatalake resource.
type DestinationAwsDatalakeArgs struct {
	Configuration DestinationAwsDatalakeConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationAwsDatalakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationAwsDatalakeArgs)(nil)).Elem()
}

type DestinationAwsDatalakeInput interface {
	pulumi.Input

	ToDestinationAwsDatalakeOutput() DestinationAwsDatalakeOutput
	ToDestinationAwsDatalakeOutputWithContext(ctx context.Context) DestinationAwsDatalakeOutput
}

func (*DestinationAwsDatalake) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAwsDatalake)(nil)).Elem()
}

func (i *DestinationAwsDatalake) ToDestinationAwsDatalakeOutput() DestinationAwsDatalakeOutput {
	return i.ToDestinationAwsDatalakeOutputWithContext(context.Background())
}

func (i *DestinationAwsDatalake) ToDestinationAwsDatalakeOutputWithContext(ctx context.Context) DestinationAwsDatalakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAwsDatalakeOutput)
}

// DestinationAwsDatalakeArrayInput is an input type that accepts DestinationAwsDatalakeArray and DestinationAwsDatalakeArrayOutput values.
// You can construct a concrete instance of `DestinationAwsDatalakeArrayInput` via:
//
//	DestinationAwsDatalakeArray{ DestinationAwsDatalakeArgs{...} }
type DestinationAwsDatalakeArrayInput interface {
	pulumi.Input

	ToDestinationAwsDatalakeArrayOutput() DestinationAwsDatalakeArrayOutput
	ToDestinationAwsDatalakeArrayOutputWithContext(context.Context) DestinationAwsDatalakeArrayOutput
}

type DestinationAwsDatalakeArray []DestinationAwsDatalakeInput

func (DestinationAwsDatalakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAwsDatalake)(nil)).Elem()
}

func (i DestinationAwsDatalakeArray) ToDestinationAwsDatalakeArrayOutput() DestinationAwsDatalakeArrayOutput {
	return i.ToDestinationAwsDatalakeArrayOutputWithContext(context.Background())
}

func (i DestinationAwsDatalakeArray) ToDestinationAwsDatalakeArrayOutputWithContext(ctx context.Context) DestinationAwsDatalakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAwsDatalakeArrayOutput)
}

// DestinationAwsDatalakeMapInput is an input type that accepts DestinationAwsDatalakeMap and DestinationAwsDatalakeMapOutput values.
// You can construct a concrete instance of `DestinationAwsDatalakeMapInput` via:
//
//	DestinationAwsDatalakeMap{ "key": DestinationAwsDatalakeArgs{...} }
type DestinationAwsDatalakeMapInput interface {
	pulumi.Input

	ToDestinationAwsDatalakeMapOutput() DestinationAwsDatalakeMapOutput
	ToDestinationAwsDatalakeMapOutputWithContext(context.Context) DestinationAwsDatalakeMapOutput
}

type DestinationAwsDatalakeMap map[string]DestinationAwsDatalakeInput

func (DestinationAwsDatalakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAwsDatalake)(nil)).Elem()
}

func (i DestinationAwsDatalakeMap) ToDestinationAwsDatalakeMapOutput() DestinationAwsDatalakeMapOutput {
	return i.ToDestinationAwsDatalakeMapOutputWithContext(context.Background())
}

func (i DestinationAwsDatalakeMap) ToDestinationAwsDatalakeMapOutputWithContext(ctx context.Context) DestinationAwsDatalakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationAwsDatalakeMapOutput)
}

type DestinationAwsDatalakeOutput struct{ *pulumi.OutputState }

func (DestinationAwsDatalakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationAwsDatalake)(nil)).Elem()
}

func (o DestinationAwsDatalakeOutput) ToDestinationAwsDatalakeOutput() DestinationAwsDatalakeOutput {
	return o
}

func (o DestinationAwsDatalakeOutput) ToDestinationAwsDatalakeOutputWithContext(ctx context.Context) DestinationAwsDatalakeOutput {
	return o
}

func (o DestinationAwsDatalakeOutput) Configuration() DestinationAwsDatalakeConfigurationOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) DestinationAwsDatalakeConfigurationOutput { return v.Configuration }).(DestinationAwsDatalakeConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationAwsDatalakeOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationAwsDatalakeOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationAwsDatalakeOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationAwsDatalakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationAwsDatalakeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationAwsDatalake) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationAwsDatalakeArrayOutput struct{ *pulumi.OutputState }

func (DestinationAwsDatalakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationAwsDatalake)(nil)).Elem()
}

func (o DestinationAwsDatalakeArrayOutput) ToDestinationAwsDatalakeArrayOutput() DestinationAwsDatalakeArrayOutput {
	return o
}

func (o DestinationAwsDatalakeArrayOutput) ToDestinationAwsDatalakeArrayOutputWithContext(ctx context.Context) DestinationAwsDatalakeArrayOutput {
	return o
}

func (o DestinationAwsDatalakeArrayOutput) Index(i pulumi.IntInput) DestinationAwsDatalakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationAwsDatalake {
		return vs[0].([]*DestinationAwsDatalake)[vs[1].(int)]
	}).(DestinationAwsDatalakeOutput)
}

type DestinationAwsDatalakeMapOutput struct{ *pulumi.OutputState }

func (DestinationAwsDatalakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationAwsDatalake)(nil)).Elem()
}

func (o DestinationAwsDatalakeMapOutput) ToDestinationAwsDatalakeMapOutput() DestinationAwsDatalakeMapOutput {
	return o
}

func (o DestinationAwsDatalakeMapOutput) ToDestinationAwsDatalakeMapOutputWithContext(ctx context.Context) DestinationAwsDatalakeMapOutput {
	return o
}

func (o DestinationAwsDatalakeMapOutput) MapIndex(k pulumi.StringInput) DestinationAwsDatalakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationAwsDatalake {
		return vs[0].(map[string]*DestinationAwsDatalake)[vs[1].(string)]
	}).(DestinationAwsDatalakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAwsDatalakeInput)(nil)).Elem(), &DestinationAwsDatalake{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAwsDatalakeArrayInput)(nil)).Elem(), DestinationAwsDatalakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationAwsDatalakeMapInput)(nil)).Elem(), DestinationAwsDatalakeMap{})
	pulumi.RegisterOutputType(DestinationAwsDatalakeOutput{})
	pulumi.RegisterOutputType(DestinationAwsDatalakeArrayOutput{})
	pulumi.RegisterOutputType(DestinationAwsDatalakeMapOutput{})
}
