// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Permission struct {
	pulumi.CustomResourceState

	// Requires replacement if changed.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	PermissionId   pulumi.StringOutput `pulumi:"permissionId"`
	// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
	// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
	// "workspaceReader"]
	PermissionType pulumi.StringOutput `pulumi:"permissionType"`
	// Internal Airbyte user ID. Requires replacement if changed.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Requires replacement if changed.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PermissionType == nil {
		return nil, errors.New("invalid value for required argument 'PermissionType'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("airbyte:index/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("airbyte:index/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// Requires replacement if changed.
	OrganizationId *string `pulumi:"organizationId"`
	PermissionId   *string `pulumi:"permissionId"`
	// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
	// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
	// "workspaceReader"]
	PermissionType *string `pulumi:"permissionType"`
	// Internal Airbyte user ID. Requires replacement if changed.
	UserId *string `pulumi:"userId"`
	// Requires replacement if changed.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type PermissionState struct {
	// Requires replacement if changed.
	OrganizationId pulumi.StringPtrInput
	PermissionId   pulumi.StringPtrInput
	// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
	// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
	// "workspaceReader"]
	PermissionType pulumi.StringPtrInput
	// Internal Airbyte user ID. Requires replacement if changed.
	UserId pulumi.StringPtrInput
	// Requires replacement if changed.
	WorkspaceId pulumi.StringPtrInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// Requires replacement if changed.
	OrganizationId *string `pulumi:"organizationId"`
	// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
	// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
	// "workspaceReader"]
	PermissionType string `pulumi:"permissionType"`
	// Internal Airbyte user ID. Requires replacement if changed.
	UserId string `pulumi:"userId"`
	// Requires replacement if changed.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Requires replacement if changed.
	OrganizationId pulumi.StringPtrInput
	// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
	// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
	// "workspaceReader"]
	PermissionType pulumi.StringInput
	// Internal Airbyte user ID. Requires replacement if changed.
	UserId pulumi.StringInput
	// Requires replacement if changed.
	WorkspaceId pulumi.StringPtrInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// PermissionMapInput is an input type that accepts PermissionMap and PermissionMapOutput values.
// You can construct a concrete instance of `PermissionMapInput` via:
//
//	PermissionMap{ "key": PermissionArgs{...} }
type PermissionMapInput interface {
	pulumi.Input

	ToPermissionMapOutput() PermissionMapOutput
	ToPermissionMapOutputWithContext(context.Context) PermissionMapOutput
}

type PermissionMap map[string]PermissionInput

func (PermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (i PermissionMap) ToPermissionMapOutput() PermissionMapOutput {
	return i.ToPermissionMapOutputWithContext(context.Background())
}

func (i PermissionMap) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionMapOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Requires replacement if changed.
func (o PermissionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o PermissionOutput) PermissionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.PermissionId }).(pulumi.StringOutput)
}

// Describes what actions/endpoints the permission entitles to. must be one of ["instanceAdmin", "organizationAdmin",
// "organizationEditor", "organizationReader", "organizationMember", "workspaceOwner", "workspaceAdmin", "workspaceEditor",
// "workspaceReader"]
func (o PermissionOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.PermissionType }).(pulumi.StringOutput)
}

// Internal Airbyte user ID. Requires replacement if changed.
func (o PermissionOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Requires replacement if changed.
func (o PermissionOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].([]*Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

type PermissionMapOutput struct{ *pulumi.OutputState }

func (PermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (o PermissionMapOutput) ToPermissionMapOutput() PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) MapIndex(k pulumi.StringInput) PermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].(map[string]*Permission)[vs[1].(string)]
	}).(PermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionArrayInput)(nil)).Elem(), PermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionMapInput)(nil)).Elem(), PermissionMap{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionMapOutput{})
}
