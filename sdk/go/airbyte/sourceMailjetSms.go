// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceMailjetSms struct {
	pulumi.CustomResourceState

	Configuration SourceMailjetSmsConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMailjetSms registers a new resource with the given unique name, arguments, and options.
func NewSourceMailjetSms(ctx *pulumi.Context,
	name string, args *SourceMailjetSmsArgs, opts ...pulumi.ResourceOption) (*SourceMailjetSms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMailjetSms
	err := ctx.RegisterResource("airbyte:index/sourceMailjetSms:SourceMailjetSms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMailjetSms gets an existing SourceMailjetSms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMailjetSms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMailjetSmsState, opts ...pulumi.ResourceOption) (*SourceMailjetSms, error) {
	var resource SourceMailjetSms
	err := ctx.ReadResource("airbyte:index/sourceMailjetSms:SourceMailjetSms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMailjetSms resources.
type sourceMailjetSmsState struct {
	Configuration *SourceMailjetSmsConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMailjetSmsState struct {
	Configuration SourceMailjetSmsConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMailjetSmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMailjetSmsState)(nil)).Elem()
}

type sourceMailjetSmsArgs struct {
	Configuration SourceMailjetSmsConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMailjetSms resource.
type SourceMailjetSmsArgs struct {
	Configuration SourceMailjetSmsConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMailjetSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMailjetSmsArgs)(nil)).Elem()
}

type SourceMailjetSmsInput interface {
	pulumi.Input

	ToSourceMailjetSmsOutput() SourceMailjetSmsOutput
	ToSourceMailjetSmsOutputWithContext(ctx context.Context) SourceMailjetSmsOutput
}

func (*SourceMailjetSms) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMailjetSms)(nil)).Elem()
}

func (i *SourceMailjetSms) ToSourceMailjetSmsOutput() SourceMailjetSmsOutput {
	return i.ToSourceMailjetSmsOutputWithContext(context.Background())
}

func (i *SourceMailjetSms) ToSourceMailjetSmsOutputWithContext(ctx context.Context) SourceMailjetSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailjetSmsOutput)
}

// SourceMailjetSmsArrayInput is an input type that accepts SourceMailjetSmsArray and SourceMailjetSmsArrayOutput values.
// You can construct a concrete instance of `SourceMailjetSmsArrayInput` via:
//
//	SourceMailjetSmsArray{ SourceMailjetSmsArgs{...} }
type SourceMailjetSmsArrayInput interface {
	pulumi.Input

	ToSourceMailjetSmsArrayOutput() SourceMailjetSmsArrayOutput
	ToSourceMailjetSmsArrayOutputWithContext(context.Context) SourceMailjetSmsArrayOutput
}

type SourceMailjetSmsArray []SourceMailjetSmsInput

func (SourceMailjetSmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMailjetSms)(nil)).Elem()
}

func (i SourceMailjetSmsArray) ToSourceMailjetSmsArrayOutput() SourceMailjetSmsArrayOutput {
	return i.ToSourceMailjetSmsArrayOutputWithContext(context.Background())
}

func (i SourceMailjetSmsArray) ToSourceMailjetSmsArrayOutputWithContext(ctx context.Context) SourceMailjetSmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailjetSmsArrayOutput)
}

// SourceMailjetSmsMapInput is an input type that accepts SourceMailjetSmsMap and SourceMailjetSmsMapOutput values.
// You can construct a concrete instance of `SourceMailjetSmsMapInput` via:
//
//	SourceMailjetSmsMap{ "key": SourceMailjetSmsArgs{...} }
type SourceMailjetSmsMapInput interface {
	pulumi.Input

	ToSourceMailjetSmsMapOutput() SourceMailjetSmsMapOutput
	ToSourceMailjetSmsMapOutputWithContext(context.Context) SourceMailjetSmsMapOutput
}

type SourceMailjetSmsMap map[string]SourceMailjetSmsInput

func (SourceMailjetSmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMailjetSms)(nil)).Elem()
}

func (i SourceMailjetSmsMap) ToSourceMailjetSmsMapOutput() SourceMailjetSmsMapOutput {
	return i.ToSourceMailjetSmsMapOutputWithContext(context.Background())
}

func (i SourceMailjetSmsMap) ToSourceMailjetSmsMapOutputWithContext(ctx context.Context) SourceMailjetSmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMailjetSmsMapOutput)
}

type SourceMailjetSmsOutput struct{ *pulumi.OutputState }

func (SourceMailjetSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMailjetSms)(nil)).Elem()
}

func (o SourceMailjetSmsOutput) ToSourceMailjetSmsOutput() SourceMailjetSmsOutput {
	return o
}

func (o SourceMailjetSmsOutput) ToSourceMailjetSmsOutputWithContext(ctx context.Context) SourceMailjetSmsOutput {
	return o
}

func (o SourceMailjetSmsOutput) Configuration() SourceMailjetSmsConfigurationOutput {
	return o.ApplyT(func(v *SourceMailjetSms) SourceMailjetSmsConfigurationOutput { return v.Configuration }).(SourceMailjetSmsConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceMailjetSmsOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceMailjetSmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceMailjetSmsOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMailjetSmsOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMailjetSmsOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMailjetSmsOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMailjetSms) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMailjetSmsArrayOutput struct{ *pulumi.OutputState }

func (SourceMailjetSmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMailjetSms)(nil)).Elem()
}

func (o SourceMailjetSmsArrayOutput) ToSourceMailjetSmsArrayOutput() SourceMailjetSmsArrayOutput {
	return o
}

func (o SourceMailjetSmsArrayOutput) ToSourceMailjetSmsArrayOutputWithContext(ctx context.Context) SourceMailjetSmsArrayOutput {
	return o
}

func (o SourceMailjetSmsArrayOutput) Index(i pulumi.IntInput) SourceMailjetSmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMailjetSms {
		return vs[0].([]*SourceMailjetSms)[vs[1].(int)]
	}).(SourceMailjetSmsOutput)
}

type SourceMailjetSmsMapOutput struct{ *pulumi.OutputState }

func (SourceMailjetSmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMailjetSms)(nil)).Elem()
}

func (o SourceMailjetSmsMapOutput) ToSourceMailjetSmsMapOutput() SourceMailjetSmsMapOutput {
	return o
}

func (o SourceMailjetSmsMapOutput) ToSourceMailjetSmsMapOutputWithContext(ctx context.Context) SourceMailjetSmsMapOutput {
	return o
}

func (o SourceMailjetSmsMapOutput) MapIndex(k pulumi.StringInput) SourceMailjetSmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMailjetSms {
		return vs[0].(map[string]*SourceMailjetSms)[vs[1].(string)]
	}).(SourceMailjetSmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailjetSmsInput)(nil)).Elem(), &SourceMailjetSms{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailjetSmsArrayInput)(nil)).Elem(), SourceMailjetSmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMailjetSmsMapInput)(nil)).Elem(), SourceMailjetSmsMap{})
	pulumi.RegisterOutputType(SourceMailjetSmsOutput{})
	pulumi.RegisterOutputType(SourceMailjetSmsArrayOutput{})
	pulumi.RegisterOutputType(SourceMailjetSmsMapOutput{})
}
