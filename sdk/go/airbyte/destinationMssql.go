// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationMssql struct {
	pulumi.CustomResourceState

	Configuration DestinationMssqlConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationMssql registers a new resource with the given unique name, arguments, and options.
func NewDestinationMssql(ctx *pulumi.Context,
	name string, args *DestinationMssqlArgs, opts ...pulumi.ResourceOption) (*DestinationMssql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationMssql
	err := ctx.RegisterResource("airbyte:index/destinationMssql:DestinationMssql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationMssql gets an existing DestinationMssql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationMssql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationMssqlState, opts ...pulumi.ResourceOption) (*DestinationMssql, error) {
	var resource DestinationMssql
	err := ctx.ReadResource("airbyte:index/destinationMssql:DestinationMssql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationMssql resources.
type destinationMssqlState struct {
	Configuration *DestinationMssqlConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationMssqlState struct {
	Configuration DestinationMssqlConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationMssqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMssqlState)(nil)).Elem()
}

type destinationMssqlArgs struct {
	Configuration DestinationMssqlConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationMssql resource.
type DestinationMssqlArgs struct {
	Configuration DestinationMssqlConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMssqlArgs)(nil)).Elem()
}

type DestinationMssqlInput interface {
	pulumi.Input

	ToDestinationMssqlOutput() DestinationMssqlOutput
	ToDestinationMssqlOutputWithContext(ctx context.Context) DestinationMssqlOutput
}

func (*DestinationMssql) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMssql)(nil)).Elem()
}

func (i *DestinationMssql) ToDestinationMssqlOutput() DestinationMssqlOutput {
	return i.ToDestinationMssqlOutputWithContext(context.Background())
}

func (i *DestinationMssql) ToDestinationMssqlOutputWithContext(ctx context.Context) DestinationMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMssqlOutput)
}

// DestinationMssqlArrayInput is an input type that accepts DestinationMssqlArray and DestinationMssqlArrayOutput values.
// You can construct a concrete instance of `DestinationMssqlArrayInput` via:
//
//	DestinationMssqlArray{ DestinationMssqlArgs{...} }
type DestinationMssqlArrayInput interface {
	pulumi.Input

	ToDestinationMssqlArrayOutput() DestinationMssqlArrayOutput
	ToDestinationMssqlArrayOutputWithContext(context.Context) DestinationMssqlArrayOutput
}

type DestinationMssqlArray []DestinationMssqlInput

func (DestinationMssqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMssql)(nil)).Elem()
}

func (i DestinationMssqlArray) ToDestinationMssqlArrayOutput() DestinationMssqlArrayOutput {
	return i.ToDestinationMssqlArrayOutputWithContext(context.Background())
}

func (i DestinationMssqlArray) ToDestinationMssqlArrayOutputWithContext(ctx context.Context) DestinationMssqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMssqlArrayOutput)
}

// DestinationMssqlMapInput is an input type that accepts DestinationMssqlMap and DestinationMssqlMapOutput values.
// You can construct a concrete instance of `DestinationMssqlMapInput` via:
//
//	DestinationMssqlMap{ "key": DestinationMssqlArgs{...} }
type DestinationMssqlMapInput interface {
	pulumi.Input

	ToDestinationMssqlMapOutput() DestinationMssqlMapOutput
	ToDestinationMssqlMapOutputWithContext(context.Context) DestinationMssqlMapOutput
}

type DestinationMssqlMap map[string]DestinationMssqlInput

func (DestinationMssqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMssql)(nil)).Elem()
}

func (i DestinationMssqlMap) ToDestinationMssqlMapOutput() DestinationMssqlMapOutput {
	return i.ToDestinationMssqlMapOutputWithContext(context.Background())
}

func (i DestinationMssqlMap) ToDestinationMssqlMapOutputWithContext(ctx context.Context) DestinationMssqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMssqlMapOutput)
}

type DestinationMssqlOutput struct{ *pulumi.OutputState }

func (DestinationMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMssql)(nil)).Elem()
}

func (o DestinationMssqlOutput) ToDestinationMssqlOutput() DestinationMssqlOutput {
	return o
}

func (o DestinationMssqlOutput) ToDestinationMssqlOutputWithContext(ctx context.Context) DestinationMssqlOutput {
	return o
}

func (o DestinationMssqlOutput) Configuration() DestinationMssqlConfigurationOutput {
	return o.ApplyT(func(v *DestinationMssql) DestinationMssqlConfigurationOutput { return v.Configuration }).(DestinationMssqlConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationMssqlOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationMssql) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationMssqlOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMssql) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationMssqlOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMssql) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationMssqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMssql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationMssqlOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMssql) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationMssqlArrayOutput struct{ *pulumi.OutputState }

func (DestinationMssqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMssql)(nil)).Elem()
}

func (o DestinationMssqlArrayOutput) ToDestinationMssqlArrayOutput() DestinationMssqlArrayOutput {
	return o
}

func (o DestinationMssqlArrayOutput) ToDestinationMssqlArrayOutputWithContext(ctx context.Context) DestinationMssqlArrayOutput {
	return o
}

func (o DestinationMssqlArrayOutput) Index(i pulumi.IntInput) DestinationMssqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationMssql {
		return vs[0].([]*DestinationMssql)[vs[1].(int)]
	}).(DestinationMssqlOutput)
}

type DestinationMssqlMapOutput struct{ *pulumi.OutputState }

func (DestinationMssqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMssql)(nil)).Elem()
}

func (o DestinationMssqlMapOutput) ToDestinationMssqlMapOutput() DestinationMssqlMapOutput {
	return o
}

func (o DestinationMssqlMapOutput) ToDestinationMssqlMapOutputWithContext(ctx context.Context) DestinationMssqlMapOutput {
	return o
}

func (o DestinationMssqlMapOutput) MapIndex(k pulumi.StringInput) DestinationMssqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationMssql {
		return vs[0].(map[string]*DestinationMssql)[vs[1].(string)]
	}).(DestinationMssqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMssqlInput)(nil)).Elem(), &DestinationMssql{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMssqlArrayInput)(nil)).Elem(), DestinationMssqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMssqlMapInput)(nil)).Elem(), DestinationMssqlMap{})
	pulumi.RegisterOutputType(DestinationMssqlOutput{})
	pulumi.RegisterOutputType(DestinationMssqlArrayOutput{})
	pulumi.RegisterOutputType(DestinationMssqlMapOutput{})
}
