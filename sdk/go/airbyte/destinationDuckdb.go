// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationDuckdb struct {
	pulumi.CustomResourceState

	Configuration DestinationDuckdbConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationDuckdb registers a new resource with the given unique name, arguments, and options.
func NewDestinationDuckdb(ctx *pulumi.Context,
	name string, args *DestinationDuckdbArgs, opts ...pulumi.ResourceOption) (*DestinationDuckdb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationDuckdb
	err := ctx.RegisterResource("airbyte:index/destinationDuckdb:DestinationDuckdb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationDuckdb gets an existing DestinationDuckdb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationDuckdb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationDuckdbState, opts ...pulumi.ResourceOption) (*DestinationDuckdb, error) {
	var resource DestinationDuckdb
	err := ctx.ReadResource("airbyte:index/destinationDuckdb:DestinationDuckdb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationDuckdb resources.
type destinationDuckdbState struct {
	Configuration *DestinationDuckdbConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationDuckdbState struct {
	Configuration DestinationDuckdbConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationDuckdbState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDuckdbState)(nil)).Elem()
}

type destinationDuckdbArgs struct {
	Configuration DestinationDuckdbConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationDuckdb resource.
type DestinationDuckdbArgs struct {
	Configuration DestinationDuckdbConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationDuckdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationDuckdbArgs)(nil)).Elem()
}

type DestinationDuckdbInput interface {
	pulumi.Input

	ToDestinationDuckdbOutput() DestinationDuckdbOutput
	ToDestinationDuckdbOutputWithContext(ctx context.Context) DestinationDuckdbOutput
}

func (*DestinationDuckdb) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDuckdb)(nil)).Elem()
}

func (i *DestinationDuckdb) ToDestinationDuckdbOutput() DestinationDuckdbOutput {
	return i.ToDestinationDuckdbOutputWithContext(context.Background())
}

func (i *DestinationDuckdb) ToDestinationDuckdbOutputWithContext(ctx context.Context) DestinationDuckdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDuckdbOutput)
}

// DestinationDuckdbArrayInput is an input type that accepts DestinationDuckdbArray and DestinationDuckdbArrayOutput values.
// You can construct a concrete instance of `DestinationDuckdbArrayInput` via:
//
//	DestinationDuckdbArray{ DestinationDuckdbArgs{...} }
type DestinationDuckdbArrayInput interface {
	pulumi.Input

	ToDestinationDuckdbArrayOutput() DestinationDuckdbArrayOutput
	ToDestinationDuckdbArrayOutputWithContext(context.Context) DestinationDuckdbArrayOutput
}

type DestinationDuckdbArray []DestinationDuckdbInput

func (DestinationDuckdbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDuckdb)(nil)).Elem()
}

func (i DestinationDuckdbArray) ToDestinationDuckdbArrayOutput() DestinationDuckdbArrayOutput {
	return i.ToDestinationDuckdbArrayOutputWithContext(context.Background())
}

func (i DestinationDuckdbArray) ToDestinationDuckdbArrayOutputWithContext(ctx context.Context) DestinationDuckdbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDuckdbArrayOutput)
}

// DestinationDuckdbMapInput is an input type that accepts DestinationDuckdbMap and DestinationDuckdbMapOutput values.
// You can construct a concrete instance of `DestinationDuckdbMapInput` via:
//
//	DestinationDuckdbMap{ "key": DestinationDuckdbArgs{...} }
type DestinationDuckdbMapInput interface {
	pulumi.Input

	ToDestinationDuckdbMapOutput() DestinationDuckdbMapOutput
	ToDestinationDuckdbMapOutputWithContext(context.Context) DestinationDuckdbMapOutput
}

type DestinationDuckdbMap map[string]DestinationDuckdbInput

func (DestinationDuckdbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDuckdb)(nil)).Elem()
}

func (i DestinationDuckdbMap) ToDestinationDuckdbMapOutput() DestinationDuckdbMapOutput {
	return i.ToDestinationDuckdbMapOutputWithContext(context.Background())
}

func (i DestinationDuckdbMap) ToDestinationDuckdbMapOutputWithContext(ctx context.Context) DestinationDuckdbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationDuckdbMapOutput)
}

type DestinationDuckdbOutput struct{ *pulumi.OutputState }

func (DestinationDuckdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDuckdb)(nil)).Elem()
}

func (o DestinationDuckdbOutput) ToDestinationDuckdbOutput() DestinationDuckdbOutput {
	return o
}

func (o DestinationDuckdbOutput) ToDestinationDuckdbOutputWithContext(ctx context.Context) DestinationDuckdbOutput {
	return o
}

func (o DestinationDuckdbOutput) Configuration() DestinationDuckdbConfigurationOutput {
	return o.ApplyT(func(v *DestinationDuckdb) DestinationDuckdbConfigurationOutput { return v.Configuration }).(DestinationDuckdbConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationDuckdbOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationDuckdb) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationDuckdbOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDuckdb) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationDuckdbOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDuckdb) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationDuckdbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDuckdb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationDuckdbOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationDuckdb) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationDuckdbArrayOutput struct{ *pulumi.OutputState }

func (DestinationDuckdbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationDuckdb)(nil)).Elem()
}

func (o DestinationDuckdbArrayOutput) ToDestinationDuckdbArrayOutput() DestinationDuckdbArrayOutput {
	return o
}

func (o DestinationDuckdbArrayOutput) ToDestinationDuckdbArrayOutputWithContext(ctx context.Context) DestinationDuckdbArrayOutput {
	return o
}

func (o DestinationDuckdbArrayOutput) Index(i pulumi.IntInput) DestinationDuckdbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationDuckdb {
		return vs[0].([]*DestinationDuckdb)[vs[1].(int)]
	}).(DestinationDuckdbOutput)
}

type DestinationDuckdbMapOutput struct{ *pulumi.OutputState }

func (DestinationDuckdbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationDuckdb)(nil)).Elem()
}

func (o DestinationDuckdbMapOutput) ToDestinationDuckdbMapOutput() DestinationDuckdbMapOutput {
	return o
}

func (o DestinationDuckdbMapOutput) ToDestinationDuckdbMapOutputWithContext(ctx context.Context) DestinationDuckdbMapOutput {
	return o
}

func (o DestinationDuckdbMapOutput) MapIndex(k pulumi.StringInput) DestinationDuckdbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationDuckdb {
		return vs[0].(map[string]*DestinationDuckdb)[vs[1].(string)]
	}).(DestinationDuckdbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDuckdbInput)(nil)).Elem(), &DestinationDuckdb{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDuckdbArrayInput)(nil)).Elem(), DestinationDuckdbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationDuckdbMapInput)(nil)).Elem(), DestinationDuckdbMap{})
	pulumi.RegisterOutputType(DestinationDuckdbOutput{})
	pulumi.RegisterOutputType(DestinationDuckdbArrayOutput{})
	pulumi.RegisterOutputType(DestinationDuckdbMapOutput{})
}
