// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationTeradata struct {
	pulumi.CustomResourceState

	Configuration DestinationTeradataConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationTeradata registers a new resource with the given unique name, arguments, and options.
func NewDestinationTeradata(ctx *pulumi.Context,
	name string, args *DestinationTeradataArgs, opts ...pulumi.ResourceOption) (*DestinationTeradata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationTeradata
	err := ctx.RegisterResource("airbyte:index/destinationTeradata:DestinationTeradata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationTeradata gets an existing DestinationTeradata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationTeradata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationTeradataState, opts ...pulumi.ResourceOption) (*DestinationTeradata, error) {
	var resource DestinationTeradata
	err := ctx.ReadResource("airbyte:index/destinationTeradata:DestinationTeradata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationTeradata resources.
type destinationTeradataState struct {
	Configuration *DestinationTeradataConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationTeradataState struct {
	Configuration DestinationTeradataConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationTeradataState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationTeradataState)(nil)).Elem()
}

type destinationTeradataArgs struct {
	Configuration DestinationTeradataConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationTeradata resource.
type DestinationTeradataArgs struct {
	Configuration DestinationTeradataConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationTeradataArgs)(nil)).Elem()
}

type DestinationTeradataInput interface {
	pulumi.Input

	ToDestinationTeradataOutput() DestinationTeradataOutput
	ToDestinationTeradataOutputWithContext(ctx context.Context) DestinationTeradataOutput
}

func (*DestinationTeradata) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTeradata)(nil)).Elem()
}

func (i *DestinationTeradata) ToDestinationTeradataOutput() DestinationTeradataOutput {
	return i.ToDestinationTeradataOutputWithContext(context.Background())
}

func (i *DestinationTeradata) ToDestinationTeradataOutputWithContext(ctx context.Context) DestinationTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTeradataOutput)
}

// DestinationTeradataArrayInput is an input type that accepts DestinationTeradataArray and DestinationTeradataArrayOutput values.
// You can construct a concrete instance of `DestinationTeradataArrayInput` via:
//
//	DestinationTeradataArray{ DestinationTeradataArgs{...} }
type DestinationTeradataArrayInput interface {
	pulumi.Input

	ToDestinationTeradataArrayOutput() DestinationTeradataArrayOutput
	ToDestinationTeradataArrayOutputWithContext(context.Context) DestinationTeradataArrayOutput
}

type DestinationTeradataArray []DestinationTeradataInput

func (DestinationTeradataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationTeradata)(nil)).Elem()
}

func (i DestinationTeradataArray) ToDestinationTeradataArrayOutput() DestinationTeradataArrayOutput {
	return i.ToDestinationTeradataArrayOutputWithContext(context.Background())
}

func (i DestinationTeradataArray) ToDestinationTeradataArrayOutputWithContext(ctx context.Context) DestinationTeradataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTeradataArrayOutput)
}

// DestinationTeradataMapInput is an input type that accepts DestinationTeradataMap and DestinationTeradataMapOutput values.
// You can construct a concrete instance of `DestinationTeradataMapInput` via:
//
//	DestinationTeradataMap{ "key": DestinationTeradataArgs{...} }
type DestinationTeradataMapInput interface {
	pulumi.Input

	ToDestinationTeradataMapOutput() DestinationTeradataMapOutput
	ToDestinationTeradataMapOutputWithContext(context.Context) DestinationTeradataMapOutput
}

type DestinationTeradataMap map[string]DestinationTeradataInput

func (DestinationTeradataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationTeradata)(nil)).Elem()
}

func (i DestinationTeradataMap) ToDestinationTeradataMapOutput() DestinationTeradataMapOutput {
	return i.ToDestinationTeradataMapOutputWithContext(context.Background())
}

func (i DestinationTeradataMap) ToDestinationTeradataMapOutputWithContext(ctx context.Context) DestinationTeradataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTeradataMapOutput)
}

type DestinationTeradataOutput struct{ *pulumi.OutputState }

func (DestinationTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTeradata)(nil)).Elem()
}

func (o DestinationTeradataOutput) ToDestinationTeradataOutput() DestinationTeradataOutput {
	return o
}

func (o DestinationTeradataOutput) ToDestinationTeradataOutputWithContext(ctx context.Context) DestinationTeradataOutput {
	return o
}

func (o DestinationTeradataOutput) Configuration() DestinationTeradataConfigurationOutput {
	return o.ApplyT(func(v *DestinationTeradata) DestinationTeradataConfigurationOutput { return v.Configuration }).(DestinationTeradataConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationTeradataOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTeradata) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationTeradataOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTeradata) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationTeradataOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTeradata) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationTeradataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTeradata) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationTeradataOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationTeradata) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationTeradataArrayOutput struct{ *pulumi.OutputState }

func (DestinationTeradataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationTeradata)(nil)).Elem()
}

func (o DestinationTeradataArrayOutput) ToDestinationTeradataArrayOutput() DestinationTeradataArrayOutput {
	return o
}

func (o DestinationTeradataArrayOutput) ToDestinationTeradataArrayOutputWithContext(ctx context.Context) DestinationTeradataArrayOutput {
	return o
}

func (o DestinationTeradataArrayOutput) Index(i pulumi.IntInput) DestinationTeradataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationTeradata {
		return vs[0].([]*DestinationTeradata)[vs[1].(int)]
	}).(DestinationTeradataOutput)
}

type DestinationTeradataMapOutput struct{ *pulumi.OutputState }

func (DestinationTeradataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationTeradata)(nil)).Elem()
}

func (o DestinationTeradataMapOutput) ToDestinationTeradataMapOutput() DestinationTeradataMapOutput {
	return o
}

func (o DestinationTeradataMapOutput) ToDestinationTeradataMapOutputWithContext(ctx context.Context) DestinationTeradataMapOutput {
	return o
}

func (o DestinationTeradataMapOutput) MapIndex(k pulumi.StringInput) DestinationTeradataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationTeradata {
		return vs[0].(map[string]*DestinationTeradata)[vs[1].(string)]
	}).(DestinationTeradataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTeradataInput)(nil)).Elem(), &DestinationTeradata{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTeradataArrayInput)(nil)).Elem(), DestinationTeradataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTeradataMapInput)(nil)).Elem(), DestinationTeradataMap{})
	pulumi.RegisterOutputType(DestinationTeradataOutput{})
	pulumi.RegisterOutputType(DestinationTeradataArrayOutput{})
	pulumi.RegisterOutputType(DestinationTeradataMapOutput{})
}
