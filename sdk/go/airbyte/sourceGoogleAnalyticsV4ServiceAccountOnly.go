// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceGoogleAnalyticsV4ServiceAccountOnly struct {
	pulumi.CustomResourceState

	Configuration SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceGoogleAnalyticsV4ServiceAccountOnly registers a new resource with the given unique name, arguments, and options.
func NewSourceGoogleAnalyticsV4ServiceAccountOnly(ctx *pulumi.Context,
	name string, args *SourceGoogleAnalyticsV4ServiceAccountOnlyArgs, opts ...pulumi.ResourceOption) (*SourceGoogleAnalyticsV4ServiceAccountOnly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceGoogleAnalyticsV4ServiceAccountOnly
	err := ctx.RegisterResource("airbyte:index/sourceGoogleAnalyticsV4ServiceAccountOnly:SourceGoogleAnalyticsV4ServiceAccountOnly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceGoogleAnalyticsV4ServiceAccountOnly gets an existing SourceGoogleAnalyticsV4ServiceAccountOnly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceGoogleAnalyticsV4ServiceAccountOnly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceGoogleAnalyticsV4ServiceAccountOnlyState, opts ...pulumi.ResourceOption) (*SourceGoogleAnalyticsV4ServiceAccountOnly, error) {
	var resource SourceGoogleAnalyticsV4ServiceAccountOnly
	err := ctx.ReadResource("airbyte:index/sourceGoogleAnalyticsV4ServiceAccountOnly:SourceGoogleAnalyticsV4ServiceAccountOnly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceGoogleAnalyticsV4ServiceAccountOnly resources.
type sourceGoogleAnalyticsV4ServiceAccountOnlyState struct {
	Configuration *SourceGoogleAnalyticsV4ServiceAccountOnlyConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyState struct {
	Configuration SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceGoogleAnalyticsV4ServiceAccountOnlyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleAnalyticsV4ServiceAccountOnlyState)(nil)).Elem()
}

type sourceGoogleAnalyticsV4ServiceAccountOnlyArgs struct {
	Configuration SourceGoogleAnalyticsV4ServiceAccountOnlyConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceGoogleAnalyticsV4ServiceAccountOnly resource.
type SourceGoogleAnalyticsV4ServiceAccountOnlyArgs struct {
	Configuration SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceGoogleAnalyticsV4ServiceAccountOnlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleAnalyticsV4ServiceAccountOnlyArgs)(nil)).Elem()
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyInput interface {
	pulumi.Input

	ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyOutput
	ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyOutput
}

func (*SourceGoogleAnalyticsV4ServiceAccountOnly) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (i *SourceGoogleAnalyticsV4ServiceAccountOnly) ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return i.ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutputWithContext(context.Background())
}

func (i *SourceGoogleAnalyticsV4ServiceAccountOnly) ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleAnalyticsV4ServiceAccountOnlyOutput)
}

// SourceGoogleAnalyticsV4ServiceAccountOnlyArrayInput is an input type that accepts SourceGoogleAnalyticsV4ServiceAccountOnlyArray and SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput values.
// You can construct a concrete instance of `SourceGoogleAnalyticsV4ServiceAccountOnlyArrayInput` via:
//
//	SourceGoogleAnalyticsV4ServiceAccountOnlyArray{ SourceGoogleAnalyticsV4ServiceAccountOnlyArgs{...} }
type SourceGoogleAnalyticsV4ServiceAccountOnlyArrayInput interface {
	pulumi.Input

	ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput
	ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutputWithContext(context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyArray []SourceGoogleAnalyticsV4ServiceAccountOnlyInput

func (SourceGoogleAnalyticsV4ServiceAccountOnlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (i SourceGoogleAnalyticsV4ServiceAccountOnlyArray) ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput {
	return i.ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutputWithContext(context.Background())
}

func (i SourceGoogleAnalyticsV4ServiceAccountOnlyArray) ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput)
}

// SourceGoogleAnalyticsV4ServiceAccountOnlyMapInput is an input type that accepts SourceGoogleAnalyticsV4ServiceAccountOnlyMap and SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput values.
// You can construct a concrete instance of `SourceGoogleAnalyticsV4ServiceAccountOnlyMapInput` via:
//
//	SourceGoogleAnalyticsV4ServiceAccountOnlyMap{ "key": SourceGoogleAnalyticsV4ServiceAccountOnlyArgs{...} }
type SourceGoogleAnalyticsV4ServiceAccountOnlyMapInput interface {
	pulumi.Input

	ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput
	ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutputWithContext(context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyMap map[string]SourceGoogleAnalyticsV4ServiceAccountOnlyInput

func (SourceGoogleAnalyticsV4ServiceAccountOnlyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (i SourceGoogleAnalyticsV4ServiceAccountOnlyMap) ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput {
	return i.ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutputWithContext(context.Background())
}

func (i SourceGoogleAnalyticsV4ServiceAccountOnlyMap) ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput)
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyOutput struct{ *pulumi.OutputState }

func (SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) Configuration() SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationOutput {
		return v.Configuration
	}).(SourceGoogleAnalyticsV4ServiceAccountOnlyConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleAnalyticsV4ServiceAccountOnly) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput struct{ *pulumi.OutputState }

func (SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput) Index(i pulumi.IntInput) SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceGoogleAnalyticsV4ServiceAccountOnly {
		return vs[0].([]*SourceGoogleAnalyticsV4ServiceAccountOnly)[vs[1].(int)]
	}).(SourceGoogleAnalyticsV4ServiceAccountOnlyOutput)
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput struct{ *pulumi.OutputState }

func (SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleAnalyticsV4ServiceAccountOnly)(nil)).Elem()
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput() SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput) ToSourceGoogleAnalyticsV4ServiceAccountOnlyMapOutputWithContext(ctx context.Context) SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput {
	return o
}

func (o SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput) MapIndex(k pulumi.StringInput) SourceGoogleAnalyticsV4ServiceAccountOnlyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceGoogleAnalyticsV4ServiceAccountOnly {
		return vs[0].(map[string]*SourceGoogleAnalyticsV4ServiceAccountOnly)[vs[1].(string)]
	}).(SourceGoogleAnalyticsV4ServiceAccountOnlyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleAnalyticsV4ServiceAccountOnlyInput)(nil)).Elem(), &SourceGoogleAnalyticsV4ServiceAccountOnly{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleAnalyticsV4ServiceAccountOnlyArrayInput)(nil)).Elem(), SourceGoogleAnalyticsV4ServiceAccountOnlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleAnalyticsV4ServiceAccountOnlyMapInput)(nil)).Elem(), SourceGoogleAnalyticsV4ServiceAccountOnlyMap{})
	pulumi.RegisterOutputType(SourceGoogleAnalyticsV4ServiceAccountOnlyOutput{})
	pulumi.RegisterOutputType(SourceGoogleAnalyticsV4ServiceAccountOnlyArrayOutput{})
	pulumi.RegisterOutputType(SourceGoogleAnalyticsV4ServiceAccountOnlyMapOutput{})
}
