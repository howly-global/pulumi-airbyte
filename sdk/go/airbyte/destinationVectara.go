// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationVectara struct {
	pulumi.CustomResourceState

	// Configuration to connect to the Vectara instance
	Configuration DestinationVectaraConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationVectara registers a new resource with the given unique name, arguments, and options.
func NewDestinationVectara(ctx *pulumi.Context,
	name string, args *DestinationVectaraArgs, opts ...pulumi.ResourceOption) (*DestinationVectara, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationVectara
	err := ctx.RegisterResource("airbyte:index/destinationVectara:DestinationVectara", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationVectara gets an existing DestinationVectara resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationVectara(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationVectaraState, opts ...pulumi.ResourceOption) (*DestinationVectara, error) {
	var resource DestinationVectara
	err := ctx.ReadResource("airbyte:index/destinationVectara:DestinationVectara", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationVectara resources.
type destinationVectaraState struct {
	// Configuration to connect to the Vectara instance
	Configuration *DestinationVectaraConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationVectaraState struct {
	// Configuration to connect to the Vectara instance
	Configuration DestinationVectaraConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationVectaraState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationVectaraState)(nil)).Elem()
}

type destinationVectaraArgs struct {
	// Configuration to connect to the Vectara instance
	Configuration DestinationVectaraConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationVectara resource.
type DestinationVectaraArgs struct {
	// Configuration to connect to the Vectara instance
	Configuration DestinationVectaraConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationVectaraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationVectaraArgs)(nil)).Elem()
}

type DestinationVectaraInput interface {
	pulumi.Input

	ToDestinationVectaraOutput() DestinationVectaraOutput
	ToDestinationVectaraOutputWithContext(ctx context.Context) DestinationVectaraOutput
}

func (*DestinationVectara) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationVectara)(nil)).Elem()
}

func (i *DestinationVectara) ToDestinationVectaraOutput() DestinationVectaraOutput {
	return i.ToDestinationVectaraOutputWithContext(context.Background())
}

func (i *DestinationVectara) ToDestinationVectaraOutputWithContext(ctx context.Context) DestinationVectaraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationVectaraOutput)
}

// DestinationVectaraArrayInput is an input type that accepts DestinationVectaraArray and DestinationVectaraArrayOutput values.
// You can construct a concrete instance of `DestinationVectaraArrayInput` via:
//
//	DestinationVectaraArray{ DestinationVectaraArgs{...} }
type DestinationVectaraArrayInput interface {
	pulumi.Input

	ToDestinationVectaraArrayOutput() DestinationVectaraArrayOutput
	ToDestinationVectaraArrayOutputWithContext(context.Context) DestinationVectaraArrayOutput
}

type DestinationVectaraArray []DestinationVectaraInput

func (DestinationVectaraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationVectara)(nil)).Elem()
}

func (i DestinationVectaraArray) ToDestinationVectaraArrayOutput() DestinationVectaraArrayOutput {
	return i.ToDestinationVectaraArrayOutputWithContext(context.Background())
}

func (i DestinationVectaraArray) ToDestinationVectaraArrayOutputWithContext(ctx context.Context) DestinationVectaraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationVectaraArrayOutput)
}

// DestinationVectaraMapInput is an input type that accepts DestinationVectaraMap and DestinationVectaraMapOutput values.
// You can construct a concrete instance of `DestinationVectaraMapInput` via:
//
//	DestinationVectaraMap{ "key": DestinationVectaraArgs{...} }
type DestinationVectaraMapInput interface {
	pulumi.Input

	ToDestinationVectaraMapOutput() DestinationVectaraMapOutput
	ToDestinationVectaraMapOutputWithContext(context.Context) DestinationVectaraMapOutput
}

type DestinationVectaraMap map[string]DestinationVectaraInput

func (DestinationVectaraMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationVectara)(nil)).Elem()
}

func (i DestinationVectaraMap) ToDestinationVectaraMapOutput() DestinationVectaraMapOutput {
	return i.ToDestinationVectaraMapOutputWithContext(context.Background())
}

func (i DestinationVectaraMap) ToDestinationVectaraMapOutputWithContext(ctx context.Context) DestinationVectaraMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationVectaraMapOutput)
}

type DestinationVectaraOutput struct{ *pulumi.OutputState }

func (DestinationVectaraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationVectara)(nil)).Elem()
}

func (o DestinationVectaraOutput) ToDestinationVectaraOutput() DestinationVectaraOutput {
	return o
}

func (o DestinationVectaraOutput) ToDestinationVectaraOutputWithContext(ctx context.Context) DestinationVectaraOutput {
	return o
}

// Configuration to connect to the Vectara instance
func (o DestinationVectaraOutput) Configuration() DestinationVectaraConfigurationOutput {
	return o.ApplyT(func(v *DestinationVectara) DestinationVectaraConfigurationOutput { return v.Configuration }).(DestinationVectaraConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationVectaraOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationVectara) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationVectaraOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVectara) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationVectaraOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVectara) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationVectaraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVectara) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationVectaraOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationVectara) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationVectaraArrayOutput struct{ *pulumi.OutputState }

func (DestinationVectaraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationVectara)(nil)).Elem()
}

func (o DestinationVectaraArrayOutput) ToDestinationVectaraArrayOutput() DestinationVectaraArrayOutput {
	return o
}

func (o DestinationVectaraArrayOutput) ToDestinationVectaraArrayOutputWithContext(ctx context.Context) DestinationVectaraArrayOutput {
	return o
}

func (o DestinationVectaraArrayOutput) Index(i pulumi.IntInput) DestinationVectaraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationVectara {
		return vs[0].([]*DestinationVectara)[vs[1].(int)]
	}).(DestinationVectaraOutput)
}

type DestinationVectaraMapOutput struct{ *pulumi.OutputState }

func (DestinationVectaraMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationVectara)(nil)).Elem()
}

func (o DestinationVectaraMapOutput) ToDestinationVectaraMapOutput() DestinationVectaraMapOutput {
	return o
}

func (o DestinationVectaraMapOutput) ToDestinationVectaraMapOutputWithContext(ctx context.Context) DestinationVectaraMapOutput {
	return o
}

func (o DestinationVectaraMapOutput) MapIndex(k pulumi.StringInput) DestinationVectaraOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationVectara {
		return vs[0].(map[string]*DestinationVectara)[vs[1].(string)]
	}).(DestinationVectaraOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationVectaraInput)(nil)).Elem(), &DestinationVectara{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationVectaraArrayInput)(nil)).Elem(), DestinationVectaraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationVectaraMapInput)(nil)).Elem(), DestinationVectaraMap{})
	pulumi.RegisterOutputType(DestinationVectaraOutput{})
	pulumi.RegisterOutputType(DestinationVectaraArrayOutput{})
	pulumi.RegisterOutputType(DestinationVectaraMapOutput{})
}
