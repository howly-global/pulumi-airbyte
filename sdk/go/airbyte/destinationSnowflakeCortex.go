// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationSnowflakeCortex struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationSnowflakeCortexConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationSnowflakeCortex registers a new resource with the given unique name, arguments, and options.
func NewDestinationSnowflakeCortex(ctx *pulumi.Context,
	name string, args *DestinationSnowflakeCortexArgs, opts ...pulumi.ResourceOption) (*DestinationSnowflakeCortex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationSnowflakeCortex
	err := ctx.RegisterResource("airbyte:index/destinationSnowflakeCortex:DestinationSnowflakeCortex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationSnowflakeCortex gets an existing DestinationSnowflakeCortex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationSnowflakeCortex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationSnowflakeCortexState, opts ...pulumi.ResourceOption) (*DestinationSnowflakeCortex, error) {
	var resource DestinationSnowflakeCortex
	err := ctx.ReadResource("airbyte:index/destinationSnowflakeCortex:DestinationSnowflakeCortex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationSnowflakeCortex resources.
type destinationSnowflakeCortexState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationSnowflakeCortexConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationSnowflakeCortexState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationSnowflakeCortexConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationSnowflakeCortexState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationSnowflakeCortexState)(nil)).Elem()
}

type destinationSnowflakeCortexArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationSnowflakeCortexConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationSnowflakeCortex resource.
type DestinationSnowflakeCortexArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationSnowflakeCortexConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationSnowflakeCortexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationSnowflakeCortexArgs)(nil)).Elem()
}

type DestinationSnowflakeCortexInput interface {
	pulumi.Input

	ToDestinationSnowflakeCortexOutput() DestinationSnowflakeCortexOutput
	ToDestinationSnowflakeCortexOutputWithContext(ctx context.Context) DestinationSnowflakeCortexOutput
}

func (*DestinationSnowflakeCortex) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationSnowflakeCortex)(nil)).Elem()
}

func (i *DestinationSnowflakeCortex) ToDestinationSnowflakeCortexOutput() DestinationSnowflakeCortexOutput {
	return i.ToDestinationSnowflakeCortexOutputWithContext(context.Background())
}

func (i *DestinationSnowflakeCortex) ToDestinationSnowflakeCortexOutputWithContext(ctx context.Context) DestinationSnowflakeCortexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationSnowflakeCortexOutput)
}

// DestinationSnowflakeCortexArrayInput is an input type that accepts DestinationSnowflakeCortexArray and DestinationSnowflakeCortexArrayOutput values.
// You can construct a concrete instance of `DestinationSnowflakeCortexArrayInput` via:
//
//	DestinationSnowflakeCortexArray{ DestinationSnowflakeCortexArgs{...} }
type DestinationSnowflakeCortexArrayInput interface {
	pulumi.Input

	ToDestinationSnowflakeCortexArrayOutput() DestinationSnowflakeCortexArrayOutput
	ToDestinationSnowflakeCortexArrayOutputWithContext(context.Context) DestinationSnowflakeCortexArrayOutput
}

type DestinationSnowflakeCortexArray []DestinationSnowflakeCortexInput

func (DestinationSnowflakeCortexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationSnowflakeCortex)(nil)).Elem()
}

func (i DestinationSnowflakeCortexArray) ToDestinationSnowflakeCortexArrayOutput() DestinationSnowflakeCortexArrayOutput {
	return i.ToDestinationSnowflakeCortexArrayOutputWithContext(context.Background())
}

func (i DestinationSnowflakeCortexArray) ToDestinationSnowflakeCortexArrayOutputWithContext(ctx context.Context) DestinationSnowflakeCortexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationSnowflakeCortexArrayOutput)
}

// DestinationSnowflakeCortexMapInput is an input type that accepts DestinationSnowflakeCortexMap and DestinationSnowflakeCortexMapOutput values.
// You can construct a concrete instance of `DestinationSnowflakeCortexMapInput` via:
//
//	DestinationSnowflakeCortexMap{ "key": DestinationSnowflakeCortexArgs{...} }
type DestinationSnowflakeCortexMapInput interface {
	pulumi.Input

	ToDestinationSnowflakeCortexMapOutput() DestinationSnowflakeCortexMapOutput
	ToDestinationSnowflakeCortexMapOutputWithContext(context.Context) DestinationSnowflakeCortexMapOutput
}

type DestinationSnowflakeCortexMap map[string]DestinationSnowflakeCortexInput

func (DestinationSnowflakeCortexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationSnowflakeCortex)(nil)).Elem()
}

func (i DestinationSnowflakeCortexMap) ToDestinationSnowflakeCortexMapOutput() DestinationSnowflakeCortexMapOutput {
	return i.ToDestinationSnowflakeCortexMapOutputWithContext(context.Background())
}

func (i DestinationSnowflakeCortexMap) ToDestinationSnowflakeCortexMapOutputWithContext(ctx context.Context) DestinationSnowflakeCortexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationSnowflakeCortexMapOutput)
}

type DestinationSnowflakeCortexOutput struct{ *pulumi.OutputState }

func (DestinationSnowflakeCortexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationSnowflakeCortex)(nil)).Elem()
}

func (o DestinationSnowflakeCortexOutput) ToDestinationSnowflakeCortexOutput() DestinationSnowflakeCortexOutput {
	return o
}

func (o DestinationSnowflakeCortexOutput) ToDestinationSnowflakeCortexOutputWithContext(ctx context.Context) DestinationSnowflakeCortexOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationSnowflakeCortexOutput) Configuration() DestinationSnowflakeCortexConfigurationOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) DestinationSnowflakeCortexConfigurationOutput {
		return v.Configuration
	}).(DestinationSnowflakeCortexConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationSnowflakeCortexOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationSnowflakeCortexOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationSnowflakeCortexOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationSnowflakeCortexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationSnowflakeCortexOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationSnowflakeCortex) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationSnowflakeCortexArrayOutput struct{ *pulumi.OutputState }

func (DestinationSnowflakeCortexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationSnowflakeCortex)(nil)).Elem()
}

func (o DestinationSnowflakeCortexArrayOutput) ToDestinationSnowflakeCortexArrayOutput() DestinationSnowflakeCortexArrayOutput {
	return o
}

func (o DestinationSnowflakeCortexArrayOutput) ToDestinationSnowflakeCortexArrayOutputWithContext(ctx context.Context) DestinationSnowflakeCortexArrayOutput {
	return o
}

func (o DestinationSnowflakeCortexArrayOutput) Index(i pulumi.IntInput) DestinationSnowflakeCortexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationSnowflakeCortex {
		return vs[0].([]*DestinationSnowflakeCortex)[vs[1].(int)]
	}).(DestinationSnowflakeCortexOutput)
}

type DestinationSnowflakeCortexMapOutput struct{ *pulumi.OutputState }

func (DestinationSnowflakeCortexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationSnowflakeCortex)(nil)).Elem()
}

func (o DestinationSnowflakeCortexMapOutput) ToDestinationSnowflakeCortexMapOutput() DestinationSnowflakeCortexMapOutput {
	return o
}

func (o DestinationSnowflakeCortexMapOutput) ToDestinationSnowflakeCortexMapOutputWithContext(ctx context.Context) DestinationSnowflakeCortexMapOutput {
	return o
}

func (o DestinationSnowflakeCortexMapOutput) MapIndex(k pulumi.StringInput) DestinationSnowflakeCortexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationSnowflakeCortex {
		return vs[0].(map[string]*DestinationSnowflakeCortex)[vs[1].(string)]
	}).(DestinationSnowflakeCortexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationSnowflakeCortexInput)(nil)).Elem(), &DestinationSnowflakeCortex{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationSnowflakeCortexArrayInput)(nil)).Elem(), DestinationSnowflakeCortexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationSnowflakeCortexMapInput)(nil)).Elem(), DestinationSnowflakeCortexMap{})
	pulumi.RegisterOutputType(DestinationSnowflakeCortexOutput{})
	pulumi.RegisterOutputType(DestinationSnowflakeCortexArrayOutput{})
	pulumi.RegisterOutputType(DestinationSnowflakeCortexMapOutput{})
}
