// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceFile struct {
	pulumi.CustomResourceState

	Configuration SourceFileConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceFile registers a new resource with the given unique name, arguments, and options.
func NewSourceFile(ctx *pulumi.Context,
	name string, args *SourceFileArgs, opts ...pulumi.ResourceOption) (*SourceFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceFile
	err := ctx.RegisterResource("airbyte:index/sourceFile:SourceFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceFile gets an existing SourceFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceFileState, opts ...pulumi.ResourceOption) (*SourceFile, error) {
	var resource SourceFile
	err := ctx.ReadResource("airbyte:index/sourceFile:SourceFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceFile resources.
type sourceFileState struct {
	Configuration *SourceFileConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceFileState struct {
	Configuration SourceFileConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceFileState)(nil)).Elem()
}

type sourceFileArgs struct {
	Configuration SourceFileConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceFile resource.
type SourceFileArgs struct {
	Configuration SourceFileConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceFileArgs)(nil)).Elem()
}

type SourceFileInput interface {
	pulumi.Input

	ToSourceFileOutput() SourceFileOutput
	ToSourceFileOutputWithContext(ctx context.Context) SourceFileOutput
}

func (*SourceFile) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceFile)(nil)).Elem()
}

func (i *SourceFile) ToSourceFileOutput() SourceFileOutput {
	return i.ToSourceFileOutputWithContext(context.Background())
}

func (i *SourceFile) ToSourceFileOutputWithContext(ctx context.Context) SourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceFileOutput)
}

// SourceFileArrayInput is an input type that accepts SourceFileArray and SourceFileArrayOutput values.
// You can construct a concrete instance of `SourceFileArrayInput` via:
//
//	SourceFileArray{ SourceFileArgs{...} }
type SourceFileArrayInput interface {
	pulumi.Input

	ToSourceFileArrayOutput() SourceFileArrayOutput
	ToSourceFileArrayOutputWithContext(context.Context) SourceFileArrayOutput
}

type SourceFileArray []SourceFileInput

func (SourceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceFile)(nil)).Elem()
}

func (i SourceFileArray) ToSourceFileArrayOutput() SourceFileArrayOutput {
	return i.ToSourceFileArrayOutputWithContext(context.Background())
}

func (i SourceFileArray) ToSourceFileArrayOutputWithContext(ctx context.Context) SourceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceFileArrayOutput)
}

// SourceFileMapInput is an input type that accepts SourceFileMap and SourceFileMapOutput values.
// You can construct a concrete instance of `SourceFileMapInput` via:
//
//	SourceFileMap{ "key": SourceFileArgs{...} }
type SourceFileMapInput interface {
	pulumi.Input

	ToSourceFileMapOutput() SourceFileMapOutput
	ToSourceFileMapOutputWithContext(context.Context) SourceFileMapOutput
}

type SourceFileMap map[string]SourceFileInput

func (SourceFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceFile)(nil)).Elem()
}

func (i SourceFileMap) ToSourceFileMapOutput() SourceFileMapOutput {
	return i.ToSourceFileMapOutputWithContext(context.Background())
}

func (i SourceFileMap) ToSourceFileMapOutputWithContext(ctx context.Context) SourceFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceFileMapOutput)
}

type SourceFileOutput struct{ *pulumi.OutputState }

func (SourceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceFile)(nil)).Elem()
}

func (o SourceFileOutput) ToSourceFileOutput() SourceFileOutput {
	return o
}

func (o SourceFileOutput) ToSourceFileOutputWithContext(ctx context.Context) SourceFileOutput {
	return o
}

func (o SourceFileOutput) Configuration() SourceFileConfigurationOutput {
	return o.ApplyT(func(v *SourceFile) SourceFileConfigurationOutput { return v.Configuration }).(SourceFileConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceFileOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceFileOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceFileOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceFileOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceFileOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceFile) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceFileArrayOutput struct{ *pulumi.OutputState }

func (SourceFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceFile)(nil)).Elem()
}

func (o SourceFileArrayOutput) ToSourceFileArrayOutput() SourceFileArrayOutput {
	return o
}

func (o SourceFileArrayOutput) ToSourceFileArrayOutputWithContext(ctx context.Context) SourceFileArrayOutput {
	return o
}

func (o SourceFileArrayOutput) Index(i pulumi.IntInput) SourceFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceFile {
		return vs[0].([]*SourceFile)[vs[1].(int)]
	}).(SourceFileOutput)
}

type SourceFileMapOutput struct{ *pulumi.OutputState }

func (SourceFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceFile)(nil)).Elem()
}

func (o SourceFileMapOutput) ToSourceFileMapOutput() SourceFileMapOutput {
	return o
}

func (o SourceFileMapOutput) ToSourceFileMapOutputWithContext(ctx context.Context) SourceFileMapOutput {
	return o
}

func (o SourceFileMapOutput) MapIndex(k pulumi.StringInput) SourceFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceFile {
		return vs[0].(map[string]*SourceFile)[vs[1].(string)]
	}).(SourceFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceFileInput)(nil)).Elem(), &SourceFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceFileArrayInput)(nil)).Elem(), SourceFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceFileMapInput)(nil)).Elem(), SourceFileMap{})
	pulumi.RegisterOutputType(SourceFileOutput{})
	pulumi.RegisterOutputType(SourceFileArrayOutput{})
	pulumi.RegisterOutputType(SourceFileMapOutput{})
}
