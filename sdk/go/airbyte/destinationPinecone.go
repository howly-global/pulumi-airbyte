// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationPinecone struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationPineconeConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationPinecone registers a new resource with the given unique name, arguments, and options.
func NewDestinationPinecone(ctx *pulumi.Context,
	name string, args *DestinationPineconeArgs, opts ...pulumi.ResourceOption) (*DestinationPinecone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationPinecone
	err := ctx.RegisterResource("airbyte:index/destinationPinecone:DestinationPinecone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationPinecone gets an existing DestinationPinecone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationPinecone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationPineconeState, opts ...pulumi.ResourceOption) (*DestinationPinecone, error) {
	var resource DestinationPinecone
	err := ctx.ReadResource("airbyte:index/destinationPinecone:DestinationPinecone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationPinecone resources.
type destinationPineconeState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationPineconeConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationPineconeState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationPineconeConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationPineconeState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPineconeState)(nil)).Elem()
}

type destinationPineconeArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationPineconeConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationPinecone resource.
type DestinationPineconeArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationPineconeConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationPineconeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationPineconeArgs)(nil)).Elem()
}

type DestinationPineconeInput interface {
	pulumi.Input

	ToDestinationPineconeOutput() DestinationPineconeOutput
	ToDestinationPineconeOutputWithContext(ctx context.Context) DestinationPineconeOutput
}

func (*DestinationPinecone) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPinecone)(nil)).Elem()
}

func (i *DestinationPinecone) ToDestinationPineconeOutput() DestinationPineconeOutput {
	return i.ToDestinationPineconeOutputWithContext(context.Background())
}

func (i *DestinationPinecone) ToDestinationPineconeOutputWithContext(ctx context.Context) DestinationPineconeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationPineconeOutput)
}

// DestinationPineconeArrayInput is an input type that accepts DestinationPineconeArray and DestinationPineconeArrayOutput values.
// You can construct a concrete instance of `DestinationPineconeArrayInput` via:
//
//	DestinationPineconeArray{ DestinationPineconeArgs{...} }
type DestinationPineconeArrayInput interface {
	pulumi.Input

	ToDestinationPineconeArrayOutput() DestinationPineconeArrayOutput
	ToDestinationPineconeArrayOutputWithContext(context.Context) DestinationPineconeArrayOutput
}

type DestinationPineconeArray []DestinationPineconeInput

func (DestinationPineconeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationPinecone)(nil)).Elem()
}

func (i DestinationPineconeArray) ToDestinationPineconeArrayOutput() DestinationPineconeArrayOutput {
	return i.ToDestinationPineconeArrayOutputWithContext(context.Background())
}

func (i DestinationPineconeArray) ToDestinationPineconeArrayOutputWithContext(ctx context.Context) DestinationPineconeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationPineconeArrayOutput)
}

// DestinationPineconeMapInput is an input type that accepts DestinationPineconeMap and DestinationPineconeMapOutput values.
// You can construct a concrete instance of `DestinationPineconeMapInput` via:
//
//	DestinationPineconeMap{ "key": DestinationPineconeArgs{...} }
type DestinationPineconeMapInput interface {
	pulumi.Input

	ToDestinationPineconeMapOutput() DestinationPineconeMapOutput
	ToDestinationPineconeMapOutputWithContext(context.Context) DestinationPineconeMapOutput
}

type DestinationPineconeMap map[string]DestinationPineconeInput

func (DestinationPineconeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationPinecone)(nil)).Elem()
}

func (i DestinationPineconeMap) ToDestinationPineconeMapOutput() DestinationPineconeMapOutput {
	return i.ToDestinationPineconeMapOutputWithContext(context.Background())
}

func (i DestinationPineconeMap) ToDestinationPineconeMapOutputWithContext(ctx context.Context) DestinationPineconeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationPineconeMapOutput)
}

type DestinationPineconeOutput struct{ *pulumi.OutputState }

func (DestinationPineconeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationPinecone)(nil)).Elem()
}

func (o DestinationPineconeOutput) ToDestinationPineconeOutput() DestinationPineconeOutput {
	return o
}

func (o DestinationPineconeOutput) ToDestinationPineconeOutputWithContext(ctx context.Context) DestinationPineconeOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationPineconeOutput) Configuration() DestinationPineconeConfigurationOutput {
	return o.ApplyT(func(v *DestinationPinecone) DestinationPineconeConfigurationOutput { return v.Configuration }).(DestinationPineconeConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationPineconeOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationPinecone) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationPineconeOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPinecone) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationPineconeOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPinecone) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationPineconeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPinecone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationPineconeOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationPinecone) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationPineconeArrayOutput struct{ *pulumi.OutputState }

func (DestinationPineconeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationPinecone)(nil)).Elem()
}

func (o DestinationPineconeArrayOutput) ToDestinationPineconeArrayOutput() DestinationPineconeArrayOutput {
	return o
}

func (o DestinationPineconeArrayOutput) ToDestinationPineconeArrayOutputWithContext(ctx context.Context) DestinationPineconeArrayOutput {
	return o
}

func (o DestinationPineconeArrayOutput) Index(i pulumi.IntInput) DestinationPineconeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationPinecone {
		return vs[0].([]*DestinationPinecone)[vs[1].(int)]
	}).(DestinationPineconeOutput)
}

type DestinationPineconeMapOutput struct{ *pulumi.OutputState }

func (DestinationPineconeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationPinecone)(nil)).Elem()
}

func (o DestinationPineconeMapOutput) ToDestinationPineconeMapOutput() DestinationPineconeMapOutput {
	return o
}

func (o DestinationPineconeMapOutput) ToDestinationPineconeMapOutputWithContext(ctx context.Context) DestinationPineconeMapOutput {
	return o
}

func (o DestinationPineconeMapOutput) MapIndex(k pulumi.StringInput) DestinationPineconeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationPinecone {
		return vs[0].(map[string]*DestinationPinecone)[vs[1].(string)]
	}).(DestinationPineconeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationPineconeInput)(nil)).Elem(), &DestinationPinecone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationPineconeArrayInput)(nil)).Elem(), DestinationPineconeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationPineconeMapInput)(nil)).Elem(), DestinationPineconeMap{})
	pulumi.RegisterOutputType(DestinationPineconeOutput{})
	pulumi.RegisterOutputType(DestinationPineconeArrayOutput{})
	pulumi.RegisterOutputType(DestinationPineconeMapOutput{})
}
