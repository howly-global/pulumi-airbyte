// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationYellowbrick struct {
	pulumi.CustomResourceState

	Configuration DestinationYellowbrickConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationYellowbrick registers a new resource with the given unique name, arguments, and options.
func NewDestinationYellowbrick(ctx *pulumi.Context,
	name string, args *DestinationYellowbrickArgs, opts ...pulumi.ResourceOption) (*DestinationYellowbrick, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationYellowbrick
	err := ctx.RegisterResource("airbyte:index/destinationYellowbrick:DestinationYellowbrick", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationYellowbrick gets an existing DestinationYellowbrick resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationYellowbrick(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationYellowbrickState, opts ...pulumi.ResourceOption) (*DestinationYellowbrick, error) {
	var resource DestinationYellowbrick
	err := ctx.ReadResource("airbyte:index/destinationYellowbrick:DestinationYellowbrick", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationYellowbrick resources.
type destinationYellowbrickState struct {
	Configuration *DestinationYellowbrickConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationYellowbrickState struct {
	Configuration DestinationYellowbrickConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationYellowbrickState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationYellowbrickState)(nil)).Elem()
}

type destinationYellowbrickArgs struct {
	Configuration DestinationYellowbrickConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationYellowbrick resource.
type DestinationYellowbrickArgs struct {
	Configuration DestinationYellowbrickConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationYellowbrickArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationYellowbrickArgs)(nil)).Elem()
}

type DestinationYellowbrickInput interface {
	pulumi.Input

	ToDestinationYellowbrickOutput() DestinationYellowbrickOutput
	ToDestinationYellowbrickOutputWithContext(ctx context.Context) DestinationYellowbrickOutput
}

func (*DestinationYellowbrick) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationYellowbrick)(nil)).Elem()
}

func (i *DestinationYellowbrick) ToDestinationYellowbrickOutput() DestinationYellowbrickOutput {
	return i.ToDestinationYellowbrickOutputWithContext(context.Background())
}

func (i *DestinationYellowbrick) ToDestinationYellowbrickOutputWithContext(ctx context.Context) DestinationYellowbrickOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationYellowbrickOutput)
}

// DestinationYellowbrickArrayInput is an input type that accepts DestinationYellowbrickArray and DestinationYellowbrickArrayOutput values.
// You can construct a concrete instance of `DestinationYellowbrickArrayInput` via:
//
//	DestinationYellowbrickArray{ DestinationYellowbrickArgs{...} }
type DestinationYellowbrickArrayInput interface {
	pulumi.Input

	ToDestinationYellowbrickArrayOutput() DestinationYellowbrickArrayOutput
	ToDestinationYellowbrickArrayOutputWithContext(context.Context) DestinationYellowbrickArrayOutput
}

type DestinationYellowbrickArray []DestinationYellowbrickInput

func (DestinationYellowbrickArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationYellowbrick)(nil)).Elem()
}

func (i DestinationYellowbrickArray) ToDestinationYellowbrickArrayOutput() DestinationYellowbrickArrayOutput {
	return i.ToDestinationYellowbrickArrayOutputWithContext(context.Background())
}

func (i DestinationYellowbrickArray) ToDestinationYellowbrickArrayOutputWithContext(ctx context.Context) DestinationYellowbrickArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationYellowbrickArrayOutput)
}

// DestinationYellowbrickMapInput is an input type that accepts DestinationYellowbrickMap and DestinationYellowbrickMapOutput values.
// You can construct a concrete instance of `DestinationYellowbrickMapInput` via:
//
//	DestinationYellowbrickMap{ "key": DestinationYellowbrickArgs{...} }
type DestinationYellowbrickMapInput interface {
	pulumi.Input

	ToDestinationYellowbrickMapOutput() DestinationYellowbrickMapOutput
	ToDestinationYellowbrickMapOutputWithContext(context.Context) DestinationYellowbrickMapOutput
}

type DestinationYellowbrickMap map[string]DestinationYellowbrickInput

func (DestinationYellowbrickMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationYellowbrick)(nil)).Elem()
}

func (i DestinationYellowbrickMap) ToDestinationYellowbrickMapOutput() DestinationYellowbrickMapOutput {
	return i.ToDestinationYellowbrickMapOutputWithContext(context.Background())
}

func (i DestinationYellowbrickMap) ToDestinationYellowbrickMapOutputWithContext(ctx context.Context) DestinationYellowbrickMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationYellowbrickMapOutput)
}

type DestinationYellowbrickOutput struct{ *pulumi.OutputState }

func (DestinationYellowbrickOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationYellowbrick)(nil)).Elem()
}

func (o DestinationYellowbrickOutput) ToDestinationYellowbrickOutput() DestinationYellowbrickOutput {
	return o
}

func (o DestinationYellowbrickOutput) ToDestinationYellowbrickOutputWithContext(ctx context.Context) DestinationYellowbrickOutput {
	return o
}

func (o DestinationYellowbrickOutput) Configuration() DestinationYellowbrickConfigurationOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) DestinationYellowbrickConfigurationOutput { return v.Configuration }).(DestinationYellowbrickConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationYellowbrickOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationYellowbrickOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationYellowbrickOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationYellowbrickOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationYellowbrickOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationYellowbrick) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationYellowbrickArrayOutput struct{ *pulumi.OutputState }

func (DestinationYellowbrickArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationYellowbrick)(nil)).Elem()
}

func (o DestinationYellowbrickArrayOutput) ToDestinationYellowbrickArrayOutput() DestinationYellowbrickArrayOutput {
	return o
}

func (o DestinationYellowbrickArrayOutput) ToDestinationYellowbrickArrayOutputWithContext(ctx context.Context) DestinationYellowbrickArrayOutput {
	return o
}

func (o DestinationYellowbrickArrayOutput) Index(i pulumi.IntInput) DestinationYellowbrickOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationYellowbrick {
		return vs[0].([]*DestinationYellowbrick)[vs[1].(int)]
	}).(DestinationYellowbrickOutput)
}

type DestinationYellowbrickMapOutput struct{ *pulumi.OutputState }

func (DestinationYellowbrickMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationYellowbrick)(nil)).Elem()
}

func (o DestinationYellowbrickMapOutput) ToDestinationYellowbrickMapOutput() DestinationYellowbrickMapOutput {
	return o
}

func (o DestinationYellowbrickMapOutput) ToDestinationYellowbrickMapOutputWithContext(ctx context.Context) DestinationYellowbrickMapOutput {
	return o
}

func (o DestinationYellowbrickMapOutput) MapIndex(k pulumi.StringInput) DestinationYellowbrickOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationYellowbrick {
		return vs[0].(map[string]*DestinationYellowbrick)[vs[1].(string)]
	}).(DestinationYellowbrickOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationYellowbrickInput)(nil)).Elem(), &DestinationYellowbrick{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationYellowbrickArrayInput)(nil)).Elem(), DestinationYellowbrickArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationYellowbrickMapInput)(nil)).Elem(), DestinationYellowbrickMap{})
	pulumi.RegisterOutputType(DestinationYellowbrickOutput{})
	pulumi.RegisterOutputType(DestinationYellowbrickArrayOutput{})
	pulumi.RegisterOutputType(DestinationYellowbrickMapOutput{})
}
