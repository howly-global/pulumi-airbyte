// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationMilvus struct {
	pulumi.CustomResourceState

	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationMilvusConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrOutput `pulumi:"definitionId"`
	DestinationId   pulumi.StringOutput    `pulumi:"destinationId"`
	DestinationType pulumi.StringOutput    `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDestinationMilvus registers a new resource with the given unique name, arguments, and options.
func NewDestinationMilvus(ctx *pulumi.Context,
	name string, args *DestinationMilvusArgs, opts ...pulumi.ResourceOption) (*DestinationMilvus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationMilvus
	err := ctx.RegisterResource("airbyte:index/destinationMilvus:DestinationMilvus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationMilvus gets an existing DestinationMilvus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationMilvus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationMilvusState, opts ...pulumi.ResourceOption) (*DestinationMilvus, error) {
	var resource DestinationMilvus
	err := ctx.ReadResource("airbyte:index/destinationMilvus:DestinationMilvus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationMilvus resources.
type destinationMilvusState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration *DestinationMilvusConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    *string `pulumi:"definitionId"`
	DestinationId   *string `pulumi:"destinationId"`
	DestinationType *string `pulumi:"destinationType"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DestinationMilvusState struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationMilvusConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId    pulumi.StringPtrInput
	DestinationId   pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (DestinationMilvusState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMilvusState)(nil)).Elem()
}

type destinationMilvusArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationMilvusConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the destination e.g. dev-mysql-instance.
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DestinationMilvus resource.
type DestinationMilvusArgs struct {
	// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
	// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
	// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
	// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
	// indexing configuration is provided by the destination connector in the sub class.
	Configuration DestinationMilvusConfigurationInput
	// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the destination e.g. dev-mysql-instance.
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (DestinationMilvusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationMilvusArgs)(nil)).Elem()
}

type DestinationMilvusInput interface {
	pulumi.Input

	ToDestinationMilvusOutput() DestinationMilvusOutput
	ToDestinationMilvusOutputWithContext(ctx context.Context) DestinationMilvusOutput
}

func (*DestinationMilvus) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMilvus)(nil)).Elem()
}

func (i *DestinationMilvus) ToDestinationMilvusOutput() DestinationMilvusOutput {
	return i.ToDestinationMilvusOutputWithContext(context.Background())
}

func (i *DestinationMilvus) ToDestinationMilvusOutputWithContext(ctx context.Context) DestinationMilvusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMilvusOutput)
}

// DestinationMilvusArrayInput is an input type that accepts DestinationMilvusArray and DestinationMilvusArrayOutput values.
// You can construct a concrete instance of `DestinationMilvusArrayInput` via:
//
//	DestinationMilvusArray{ DestinationMilvusArgs{...} }
type DestinationMilvusArrayInput interface {
	pulumi.Input

	ToDestinationMilvusArrayOutput() DestinationMilvusArrayOutput
	ToDestinationMilvusArrayOutputWithContext(context.Context) DestinationMilvusArrayOutput
}

type DestinationMilvusArray []DestinationMilvusInput

func (DestinationMilvusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMilvus)(nil)).Elem()
}

func (i DestinationMilvusArray) ToDestinationMilvusArrayOutput() DestinationMilvusArrayOutput {
	return i.ToDestinationMilvusArrayOutputWithContext(context.Background())
}

func (i DestinationMilvusArray) ToDestinationMilvusArrayOutputWithContext(ctx context.Context) DestinationMilvusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMilvusArrayOutput)
}

// DestinationMilvusMapInput is an input type that accepts DestinationMilvusMap and DestinationMilvusMapOutput values.
// You can construct a concrete instance of `DestinationMilvusMapInput` via:
//
//	DestinationMilvusMap{ "key": DestinationMilvusArgs{...} }
type DestinationMilvusMapInput interface {
	pulumi.Input

	ToDestinationMilvusMapOutput() DestinationMilvusMapOutput
	ToDestinationMilvusMapOutputWithContext(context.Context) DestinationMilvusMapOutput
}

type DestinationMilvusMap map[string]DestinationMilvusInput

func (DestinationMilvusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMilvus)(nil)).Elem()
}

func (i DestinationMilvusMap) ToDestinationMilvusMapOutput() DestinationMilvusMapOutput {
	return i.ToDestinationMilvusMapOutputWithContext(context.Background())
}

func (i DestinationMilvusMap) ToDestinationMilvusMapOutputWithContext(ctx context.Context) DestinationMilvusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationMilvusMapOutput)
}

type DestinationMilvusOutput struct{ *pulumi.OutputState }

func (DestinationMilvusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationMilvus)(nil)).Elem()
}

func (o DestinationMilvusOutput) ToDestinationMilvusOutput() DestinationMilvusOutput {
	return o
}

func (o DestinationMilvusOutput) ToDestinationMilvusOutputWithContext(ctx context.Context) DestinationMilvusOutput {
	return o
}

// The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination
// configuration, as well as to provide type safety for the configuration passed to the destination. The configuration
// model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration *
// Advanced configuration Processing, embedding and advanced configuration are provided by this base class, while the
// indexing configuration is provided by the destination connector in the sub class.
func (o DestinationMilvusOutput) Configuration() DestinationMilvusConfigurationOutput {
	return o.ApplyT(func(v *DestinationMilvus) DestinationMilvusConfigurationOutput { return v.Configuration }).(DestinationMilvusConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided. Requires
// replacement if changed.
func (o DestinationMilvusOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationMilvus) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

func (o DestinationMilvusOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMilvus) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationMilvusOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMilvus) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// Name of the destination e.g. dev-mysql-instance.
func (o DestinationMilvusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMilvus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DestinationMilvusOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationMilvus) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DestinationMilvusArrayOutput struct{ *pulumi.OutputState }

func (DestinationMilvusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationMilvus)(nil)).Elem()
}

func (o DestinationMilvusArrayOutput) ToDestinationMilvusArrayOutput() DestinationMilvusArrayOutput {
	return o
}

func (o DestinationMilvusArrayOutput) ToDestinationMilvusArrayOutputWithContext(ctx context.Context) DestinationMilvusArrayOutput {
	return o
}

func (o DestinationMilvusArrayOutput) Index(i pulumi.IntInput) DestinationMilvusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationMilvus {
		return vs[0].([]*DestinationMilvus)[vs[1].(int)]
	}).(DestinationMilvusOutput)
}

type DestinationMilvusMapOutput struct{ *pulumi.OutputState }

func (DestinationMilvusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationMilvus)(nil)).Elem()
}

func (o DestinationMilvusMapOutput) ToDestinationMilvusMapOutput() DestinationMilvusMapOutput {
	return o
}

func (o DestinationMilvusMapOutput) ToDestinationMilvusMapOutputWithContext(ctx context.Context) DestinationMilvusMapOutput {
	return o
}

func (o DestinationMilvusMapOutput) MapIndex(k pulumi.StringInput) DestinationMilvusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationMilvus {
		return vs[0].(map[string]*DestinationMilvus)[vs[1].(string)]
	}).(DestinationMilvusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMilvusInput)(nil)).Elem(), &DestinationMilvus{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMilvusArrayInput)(nil)).Elem(), DestinationMilvusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationMilvusMapInput)(nil)).Elem(), DestinationMilvusMap{})
	pulumi.RegisterOutputType(DestinationMilvusOutput{})
	pulumi.RegisterOutputType(DestinationMilvusArrayOutput{})
	pulumi.RegisterOutputType(DestinationMilvusMapOutput{})
}
