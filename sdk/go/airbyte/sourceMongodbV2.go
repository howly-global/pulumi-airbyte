// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceMongodbV2 struct {
	pulumi.CustomResourceState

	Configuration SourceMongodbV2ConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceMongodbV2 registers a new resource with the given unique name, arguments, and options.
func NewSourceMongodbV2(ctx *pulumi.Context,
	name string, args *SourceMongodbV2Args, opts ...pulumi.ResourceOption) (*SourceMongodbV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceMongodbV2
	err := ctx.RegisterResource("airbyte:index/sourceMongodbV2:SourceMongodbV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceMongodbV2 gets an existing SourceMongodbV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceMongodbV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceMongodbV2State, opts ...pulumi.ResourceOption) (*SourceMongodbV2, error) {
	var resource SourceMongodbV2
	err := ctx.ReadResource("airbyte:index/sourceMongodbV2:SourceMongodbV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceMongodbV2 resources.
type sourceMongodbV2State struct {
	Configuration *SourceMongodbV2Configuration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceMongodbV2State struct {
	Configuration SourceMongodbV2ConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceMongodbV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMongodbV2State)(nil)).Elem()
}

type sourceMongodbV2Args struct {
	Configuration SourceMongodbV2Configuration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceMongodbV2 resource.
type SourceMongodbV2Args struct {
	Configuration SourceMongodbV2ConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceMongodbV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceMongodbV2Args)(nil)).Elem()
}

type SourceMongodbV2Input interface {
	pulumi.Input

	ToSourceMongodbV2Output() SourceMongodbV2Output
	ToSourceMongodbV2OutputWithContext(ctx context.Context) SourceMongodbV2Output
}

func (*SourceMongodbV2) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMongodbV2)(nil)).Elem()
}

func (i *SourceMongodbV2) ToSourceMongodbV2Output() SourceMongodbV2Output {
	return i.ToSourceMongodbV2OutputWithContext(context.Background())
}

func (i *SourceMongodbV2) ToSourceMongodbV2OutputWithContext(ctx context.Context) SourceMongodbV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMongodbV2Output)
}

// SourceMongodbV2ArrayInput is an input type that accepts SourceMongodbV2Array and SourceMongodbV2ArrayOutput values.
// You can construct a concrete instance of `SourceMongodbV2ArrayInput` via:
//
//	SourceMongodbV2Array{ SourceMongodbV2Args{...} }
type SourceMongodbV2ArrayInput interface {
	pulumi.Input

	ToSourceMongodbV2ArrayOutput() SourceMongodbV2ArrayOutput
	ToSourceMongodbV2ArrayOutputWithContext(context.Context) SourceMongodbV2ArrayOutput
}

type SourceMongodbV2Array []SourceMongodbV2Input

func (SourceMongodbV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMongodbV2)(nil)).Elem()
}

func (i SourceMongodbV2Array) ToSourceMongodbV2ArrayOutput() SourceMongodbV2ArrayOutput {
	return i.ToSourceMongodbV2ArrayOutputWithContext(context.Background())
}

func (i SourceMongodbV2Array) ToSourceMongodbV2ArrayOutputWithContext(ctx context.Context) SourceMongodbV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMongodbV2ArrayOutput)
}

// SourceMongodbV2MapInput is an input type that accepts SourceMongodbV2Map and SourceMongodbV2MapOutput values.
// You can construct a concrete instance of `SourceMongodbV2MapInput` via:
//
//	SourceMongodbV2Map{ "key": SourceMongodbV2Args{...} }
type SourceMongodbV2MapInput interface {
	pulumi.Input

	ToSourceMongodbV2MapOutput() SourceMongodbV2MapOutput
	ToSourceMongodbV2MapOutputWithContext(context.Context) SourceMongodbV2MapOutput
}

type SourceMongodbV2Map map[string]SourceMongodbV2Input

func (SourceMongodbV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMongodbV2)(nil)).Elem()
}

func (i SourceMongodbV2Map) ToSourceMongodbV2MapOutput() SourceMongodbV2MapOutput {
	return i.ToSourceMongodbV2MapOutputWithContext(context.Background())
}

func (i SourceMongodbV2Map) ToSourceMongodbV2MapOutputWithContext(ctx context.Context) SourceMongodbV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMongodbV2MapOutput)
}

type SourceMongodbV2Output struct{ *pulumi.OutputState }

func (SourceMongodbV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceMongodbV2)(nil)).Elem()
}

func (o SourceMongodbV2Output) ToSourceMongodbV2Output() SourceMongodbV2Output {
	return o
}

func (o SourceMongodbV2Output) ToSourceMongodbV2OutputWithContext(ctx context.Context) SourceMongodbV2Output {
	return o
}

func (o SourceMongodbV2Output) Configuration() SourceMongodbV2ConfigurationOutput {
	return o.ApplyT(func(v *SourceMongodbV2) SourceMongodbV2ConfigurationOutput { return v.Configuration }).(SourceMongodbV2ConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceMongodbV2Output) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceMongodbV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceMongodbV2Output) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceMongodbV2Output) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceMongodbV2Output) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceMongodbV2Output) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceMongodbV2) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceMongodbV2ArrayOutput struct{ *pulumi.OutputState }

func (SourceMongodbV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceMongodbV2)(nil)).Elem()
}

func (o SourceMongodbV2ArrayOutput) ToSourceMongodbV2ArrayOutput() SourceMongodbV2ArrayOutput {
	return o
}

func (o SourceMongodbV2ArrayOutput) ToSourceMongodbV2ArrayOutputWithContext(ctx context.Context) SourceMongodbV2ArrayOutput {
	return o
}

func (o SourceMongodbV2ArrayOutput) Index(i pulumi.IntInput) SourceMongodbV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceMongodbV2 {
		return vs[0].([]*SourceMongodbV2)[vs[1].(int)]
	}).(SourceMongodbV2Output)
}

type SourceMongodbV2MapOutput struct{ *pulumi.OutputState }

func (SourceMongodbV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceMongodbV2)(nil)).Elem()
}

func (o SourceMongodbV2MapOutput) ToSourceMongodbV2MapOutput() SourceMongodbV2MapOutput {
	return o
}

func (o SourceMongodbV2MapOutput) ToSourceMongodbV2MapOutputWithContext(ctx context.Context) SourceMongodbV2MapOutput {
	return o
}

func (o SourceMongodbV2MapOutput) MapIndex(k pulumi.StringInput) SourceMongodbV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceMongodbV2 {
		return vs[0].(map[string]*SourceMongodbV2)[vs[1].(string)]
	}).(SourceMongodbV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMongodbV2Input)(nil)).Elem(), &SourceMongodbV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMongodbV2ArrayInput)(nil)).Elem(), SourceMongodbV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMongodbV2MapInput)(nil)).Elem(), SourceMongodbV2Map{})
	pulumi.RegisterOutputType(SourceMongodbV2Output{})
	pulumi.RegisterOutputType(SourceMongodbV2ArrayOutput{})
	pulumi.RegisterOutputType(SourceMongodbV2MapOutput{})
}
