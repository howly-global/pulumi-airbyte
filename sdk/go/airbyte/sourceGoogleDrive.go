// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"errors"
	"github.com/howly-global/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceGoogleDrive struct {
	pulumi.CustomResourceState

	// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
	// configure a file-based source.
	Configuration SourceGoogleDriveConfigurationOutput `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrOutput `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrOutput `pulumi:"secretId"`
	SourceId    pulumi.StringOutput    `pulumi:"sourceId"`
	SourceType  pulumi.StringOutput    `pulumi:"sourceType"`
	WorkspaceId pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewSourceGoogleDrive registers a new resource with the given unique name, arguments, and options.
func NewSourceGoogleDrive(ctx *pulumi.Context,
	name string, args *SourceGoogleDriveArgs, opts ...pulumi.ResourceOption) (*SourceGoogleDrive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceGoogleDrive
	err := ctx.RegisterResource("airbyte:index/sourceGoogleDrive:SourceGoogleDrive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceGoogleDrive gets an existing SourceGoogleDrive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceGoogleDrive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceGoogleDriveState, opts ...pulumi.ResourceOption) (*SourceGoogleDrive, error) {
	var resource SourceGoogleDrive
	err := ctx.ReadResource("airbyte:index/sourceGoogleDrive:SourceGoogleDrive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceGoogleDrive resources.
type sourceGoogleDriveState struct {
	// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
	// configure a file-based source.
	Configuration *SourceGoogleDriveConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	SourceId    *string `pulumi:"sourceId"`
	SourceType  *string `pulumi:"sourceType"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type SourceGoogleDriveState struct {
	// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
	// configure a file-based source.
	Configuration SourceGoogleDriveConfigurationPtrInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	SourceId    pulumi.StringPtrInput
	SourceType  pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (SourceGoogleDriveState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleDriveState)(nil)).Elem()
}

type sourceGoogleDriveArgs struct {
	// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
	// configure a file-based source.
	Configuration SourceGoogleDriveConfiguration `pulumi:"configuration"`
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId *string `pulumi:"definitionId"`
	// Name of the source e.g. dev-mysql-instance.
	Name *string `pulumi:"name"`
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    *string `pulumi:"secretId"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SourceGoogleDrive resource.
type SourceGoogleDriveArgs struct {
	// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
	// configure a file-based source.
	Configuration SourceGoogleDriveConfigurationInput
	// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
	// replacement if changed.
	DefinitionId pulumi.StringPtrInput
	// Name of the source e.g. dev-mysql-instance.
	Name pulumi.StringPtrInput
	// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
	SecretId    pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (SourceGoogleDriveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceGoogleDriveArgs)(nil)).Elem()
}

type SourceGoogleDriveInput interface {
	pulumi.Input

	ToSourceGoogleDriveOutput() SourceGoogleDriveOutput
	ToSourceGoogleDriveOutputWithContext(ctx context.Context) SourceGoogleDriveOutput
}

func (*SourceGoogleDrive) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleDrive)(nil)).Elem()
}

func (i *SourceGoogleDrive) ToSourceGoogleDriveOutput() SourceGoogleDriveOutput {
	return i.ToSourceGoogleDriveOutputWithContext(context.Background())
}

func (i *SourceGoogleDrive) ToSourceGoogleDriveOutputWithContext(ctx context.Context) SourceGoogleDriveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleDriveOutput)
}

// SourceGoogleDriveArrayInput is an input type that accepts SourceGoogleDriveArray and SourceGoogleDriveArrayOutput values.
// You can construct a concrete instance of `SourceGoogleDriveArrayInput` via:
//
//	SourceGoogleDriveArray{ SourceGoogleDriveArgs{...} }
type SourceGoogleDriveArrayInput interface {
	pulumi.Input

	ToSourceGoogleDriveArrayOutput() SourceGoogleDriveArrayOutput
	ToSourceGoogleDriveArrayOutputWithContext(context.Context) SourceGoogleDriveArrayOutput
}

type SourceGoogleDriveArray []SourceGoogleDriveInput

func (SourceGoogleDriveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleDrive)(nil)).Elem()
}

func (i SourceGoogleDriveArray) ToSourceGoogleDriveArrayOutput() SourceGoogleDriveArrayOutput {
	return i.ToSourceGoogleDriveArrayOutputWithContext(context.Background())
}

func (i SourceGoogleDriveArray) ToSourceGoogleDriveArrayOutputWithContext(ctx context.Context) SourceGoogleDriveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleDriveArrayOutput)
}

// SourceGoogleDriveMapInput is an input type that accepts SourceGoogleDriveMap and SourceGoogleDriveMapOutput values.
// You can construct a concrete instance of `SourceGoogleDriveMapInput` via:
//
//	SourceGoogleDriveMap{ "key": SourceGoogleDriveArgs{...} }
type SourceGoogleDriveMapInput interface {
	pulumi.Input

	ToSourceGoogleDriveMapOutput() SourceGoogleDriveMapOutput
	ToSourceGoogleDriveMapOutputWithContext(context.Context) SourceGoogleDriveMapOutput
}

type SourceGoogleDriveMap map[string]SourceGoogleDriveInput

func (SourceGoogleDriveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleDrive)(nil)).Elem()
}

func (i SourceGoogleDriveMap) ToSourceGoogleDriveMapOutput() SourceGoogleDriveMapOutput {
	return i.ToSourceGoogleDriveMapOutputWithContext(context.Background())
}

func (i SourceGoogleDriveMap) ToSourceGoogleDriveMapOutputWithContext(ctx context.Context) SourceGoogleDriveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceGoogleDriveMapOutput)
}

type SourceGoogleDriveOutput struct{ *pulumi.OutputState }

func (SourceGoogleDriveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceGoogleDrive)(nil)).Elem()
}

func (o SourceGoogleDriveOutput) ToSourceGoogleDriveOutput() SourceGoogleDriveOutput {
	return o
}

func (o SourceGoogleDriveOutput) ToSourceGoogleDriveOutputWithContext(ctx context.Context) SourceGoogleDriveOutput {
	return o
}

// Used during spec; allows the developer to configure the cloud provider specific options that are needed when users
// configure a file-based source.
func (o SourceGoogleDriveOutput) Configuration() SourceGoogleDriveConfigurationOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) SourceGoogleDriveConfigurationOutput { return v.Configuration }).(SourceGoogleDriveConfigurationOutput)
}

// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires
// replacement if changed.
func (o SourceGoogleDriveOutput) DefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringPtrOutput { return v.DefinitionId }).(pulumi.StringPtrOutput)
}

// Name of the source e.g. dev-mysql-instance.
func (o SourceGoogleDriveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
func (o SourceGoogleDriveOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringPtrOutput { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o SourceGoogleDriveOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

func (o SourceGoogleDriveOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

func (o SourceGoogleDriveOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceGoogleDrive) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type SourceGoogleDriveArrayOutput struct{ *pulumi.OutputState }

func (SourceGoogleDriveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceGoogleDrive)(nil)).Elem()
}

func (o SourceGoogleDriveArrayOutput) ToSourceGoogleDriveArrayOutput() SourceGoogleDriveArrayOutput {
	return o
}

func (o SourceGoogleDriveArrayOutput) ToSourceGoogleDriveArrayOutputWithContext(ctx context.Context) SourceGoogleDriveArrayOutput {
	return o
}

func (o SourceGoogleDriveArrayOutput) Index(i pulumi.IntInput) SourceGoogleDriveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceGoogleDrive {
		return vs[0].([]*SourceGoogleDrive)[vs[1].(int)]
	}).(SourceGoogleDriveOutput)
}

type SourceGoogleDriveMapOutput struct{ *pulumi.OutputState }

func (SourceGoogleDriveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceGoogleDrive)(nil)).Elem()
}

func (o SourceGoogleDriveMapOutput) ToSourceGoogleDriveMapOutput() SourceGoogleDriveMapOutput {
	return o
}

func (o SourceGoogleDriveMapOutput) ToSourceGoogleDriveMapOutputWithContext(ctx context.Context) SourceGoogleDriveMapOutput {
	return o
}

func (o SourceGoogleDriveMapOutput) MapIndex(k pulumi.StringInput) SourceGoogleDriveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceGoogleDrive {
		return vs[0].(map[string]*SourceGoogleDrive)[vs[1].(string)]
	}).(SourceGoogleDriveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleDriveInput)(nil)).Elem(), &SourceGoogleDrive{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleDriveArrayInput)(nil)).Elem(), SourceGoogleDriveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceGoogleDriveMapInput)(nil)).Elem(), SourceGoogleDriveMap{})
	pulumi.RegisterOutputType(SourceGoogleDriveOutput{})
	pulumi.RegisterOutputType(SourceGoogleDriveArrayOutput{})
	pulumi.RegisterOutputType(SourceGoogleDriveMapOutput{})
}
