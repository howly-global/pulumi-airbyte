# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PermissionArgs', 'Permission']

@pulumi.input_type
class PermissionArgs:
    def __init__(__self__, *,
                 permission_type: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 organization_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Permission resource.
        :param pulumi.Input[str] permission_type: Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
               "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
               "workspace_editor", "workspace_reader"]
        :param pulumi.Input[str] user_id: Internal Airbyte user ID. Requires replacement if changed.
        :param pulumi.Input[str] organization_id: Requires replacement if changed.
        :param pulumi.Input[str] workspace_id: Requires replacement if changed.
        """
        pulumi.set(__self__, "permission_type", permission_type)
        pulumi.set(__self__, "user_id", user_id)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> pulumi.Input[str]:
        """
        Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
        "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
        "workspace_editor", "workspace_reader"]
        """
        return pulumi.get(self, "permission_type")

    @permission_type.setter
    def permission_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_type", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Internal Airbyte user ID. Requires replacement if changed.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _PermissionState:
    def __init__(__self__, *,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 permission_id: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Permission resources.
        :param pulumi.Input[str] organization_id: Requires replacement if changed.
        :param pulumi.Input[str] permission_type: Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
               "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
               "workspace_editor", "workspace_reader"]
        :param pulumi.Input[str] user_id: Internal Airbyte user ID. Requires replacement if changed.
        :param pulumi.Input[str] workspace_id: Requires replacement if changed.
        """
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if permission_id is not None:
            pulumi.set(__self__, "permission_id", permission_id)
        if permission_type is not None:
            pulumi.set(__self__, "permission_type", permission_type)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission_id")

    @permission_id.setter
    def permission_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_id", value)

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> Optional[pulumi.Input[str]]:
        """
        Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
        "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
        "workspace_editor", "workspace_reader"]
        """
        return pulumi.get(self, "permission_type")

    @permission_type.setter
    def permission_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_type", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Internal Airbyte user ID. Requires replacement if changed.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class Permission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Permission resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] organization_id: Requires replacement if changed.
        :param pulumi.Input[str] permission_type: Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
               "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
               "workspace_editor", "workspace_reader"]
        :param pulumi.Input[str] user_id: Internal Airbyte user ID. Requires replacement if changed.
        :param pulumi.Input[str] workspace_id: Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Permission resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 permission_type: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionArgs.__new__(PermissionArgs)

            __props__.__dict__["organization_id"] = organization_id
            if permission_type is None and not opts.urn:
                raise TypeError("Missing required property 'permission_type'")
            __props__.__dict__["permission_type"] = permission_type
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["permission_id"] = None
        super(Permission, __self__).__init__(
            'airbyte:index/permission:Permission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            permission_id: Optional[pulumi.Input[str]] = None,
            permission_type: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'Permission':
        """
        Get an existing Permission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] organization_id: Requires replacement if changed.
        :param pulumi.Input[str] permission_type: Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
               "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
               "workspace_editor", "workspace_reader"]
        :param pulumi.Input[str] user_id: Internal Airbyte user ID. Requires replacement if changed.
        :param pulumi.Input[str] workspace_id: Requires replacement if changed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionState.__new__(_PermissionState)

        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["permission_id"] = permission_id
        __props__.__dict__["permission_type"] = permission_type
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["workspace_id"] = workspace_id
        return Permission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="permissionId")
    def permission_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permission_id")

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> pulumi.Output[str]:
        """
        Describes what actions/endpoints the permission entitles to. must be one of ["instance_admin", "organization_admin",
        "organization_editor", "organization_reader", "organization_member", "workspace_owner", "workspace_admin",
        "workspace_editor", "workspace_reader"]
        """
        return pulumi.get(self, "permission_type")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        Internal Airbyte user ID. Requires replacement if changed.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "workspace_id")

